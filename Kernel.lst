     1                                  ;**********************************************************
     2                                  ; Kernel.asm
     3                                  ;   A basic 32 bit binary kernel
     4                                  ;
     5                                  ; nasm -f bin Kernel.asm -o Kernel.bin -l Kernel.lst
     6                                  ;**********************************************************
     7                                  
     8                                  [bits  32]                              ; 32 bit code
     9                                      org   100000h                       ; Kernel starts at 1 MB
    10 00000000 E907020000                  jmp   Stage3                        ; Jump to entry point
    11                                  
    12                                  ;--------------------------------------------------------------------------------------------------
    13                                  ; Include Major Components
    14                                  ;--------------------------------------------------------------------------------------------------
    15                                  %include "Video.asm"                    ; Include video routines
     1                              <1> ;**********************************************************
     2                              <1> ; Video.asm
     3                              <1> ;   Video routines for kernel
     4                              <1> ;   Provides basic video output functions
     5                              <1> ;   such as printing characters and strings to the screen
     6                              <1> ;   and updating the hardware cursor.
     7                              <1> ;**********************************************************
     8                              <1> 
     9                              <1> ;--------------------------------------------------------------------------------------------------
    10                              <1> ; Video Routines
    11                              <1> ;--------------------------------------------------------------------------------------------------
    12                              <1> 
    13                              <1> ;---------------
    14                              <1> ;- Color Codes -
    15                              <1> ;---------------
    16                              <1> ;  0 0 Black
    17                              <1> ;  1 1 Blue
    18                              <1> ;  2 2 Green
    19                              <1> ;  3 3 Cyan
    20                              <1> ;  4 4 Red
    21                              <1> ;  5 5 Magenta
    22                              <1> ;  6 6 Brown
    23                              <1> ;  7 7 White
    24                              <1> ;  8 8 Gray
    25                              <1> ;  9 9 Light Blue
    26                              <1> ; 10 A Light Green
    27                              <1> ; 11 B Light Cyan
    28                              <1> ; 12 C Light Red
    29                              <1> ; 13 D Light Magenta
    30                              <1> ; 14 E Yellow
    31                              <1> ; 15 F Bright White
    32                              <1> ; Example 3F
    33                              <1> ;         ^^
    34                              <1> ;         ||
    35                              <1> ;         ||- Foreground F = White
    36                              <1> ;         |-- Background 3 = Cyan
    37                              <1> 
    38                              <1> ;------------------------------------------
    39                              <1> ; Routine to calculate video memory address
    40                              <1> ;   represented by the given Row,Col
    41                              <1> ;------------------------------------------
    42                              <1> CalcVideoAddr:
    43 00000005 60                  <1>     pusha                               ; Save registers
    44 00000006 A0[410C0000]        <1>     mov   al,[Row]                      ; If Row is
    45 0000000B 3C19                <1>     cmp   al,25                         ;  is less than 25
    46 0000000D 7C0C                <1>     jl    CalcVideoAddr1                ;  go to CalcVideoAddr1
    47 0000000F B018                <1>     mov   al,24                         ; Set row to 24
    48 00000011 A2[410C0000]        <1>     mov   [Row],al                      ;  and save it
    49 00000016 E82D010000          <1>     call ScrollUp                       ;  and scroll up the screen
    50                              <1> CalcVideoAddr1:    
    51 0000001B 31C0                <1>     xor   eax,eax                       ; Row calculation
    52 0000001D A0[410C0000]        <1>     mov   al,[Row]                      ;  row
    53 00000022 48                  <1>     dec   eax                           ;  minus 1
    54 00000023 BAA0000000          <1>     mov   edx,160                       ;  times
    55 00000028 F7E2                <1>     mul   edx                           ;  160
    56 0000002A 50                  <1>     push  eax                           ;  save it
    57 0000002B 31C0                <1>     xor   eax,eax                       ; Col calculation
    58 0000002D A0[420C0000]        <1>     mov   al,[Col]                      ;  col
    59 00000032 BA02000000          <1>     mov   edx,2                         ;  times
    60 00000037 F7E2                <1>     mul   edx                           ;  2
    61 00000039 83E802              <1>     sub   eax,2                         ;  minus 2
    62 0000003C 5A                  <1>     pop   edx                           ; Add col calculation
    63 0000003D 01D0                <1>     add   eax,edx                       ;  to row calculation
    64 0000003F 0500800B00          <1>     add   eax,VidMem                    ;  plus VidMem
    65 00000044 A3[430C0000]        <1>     mov   [VidAdr],eax                  ; Save in VidAdr
    66 00000049 61                  <1>     popa                                ; Restore registers
    67 0000004A C3                  <1>     ret                                 ; Return to caller
    68                              <1> 
    69                              <1> ;------------------------------
    70                              <1> ; Put a character on the screen
    71                              <1> ; EDI = address in video memory
    72                              <1> ;------------------------------
    73                              <1> PutChar:
    74 0000004B 60                  <1>     pusha                               ; Save registers
    75 0000004C 8B3D[430C0000]      <1>     mov   edi,[VidAdr]                  ; EDI = Video Address
    76 00000052 8A15[3F0C0000]      <1>     mov   dl,[Char]                     ; DL = character
    77 00000058 8A35[3E0C0000]      <1>     mov   dh,[ColorAttr]                ; DH = attribute
    78 0000005E 668917              <1>     mov   [edi],dx                      ; Move attribute and character to video display
    79 00000061 61                  <1>     popa                                ; Restore registers
    80 00000062 C3                  <1>     ret                                 ; Return to caller
    81                              <1> 
    82                              <1> ;---------------------------------
    83                              <1> ; Print a null terminated string
    84                              <1> ; EBX = address of string to print
    85                              <1> ;---------------------------------
    86                              <1> PutStr:
    87 00000063 60                  <1>     pusha                               ; Save registers
    88 00000064 E89CFFFFFF          <1>     call  CalcVideoAddr                 ; Calculate video address
    89 00000069 31C9                <1>     xor   ecx,ecx                       ; Clear ECX
    90 0000006B 53                  <1>     push  ebx                           ; Copy the string address in EBX
    91 0000006C 5E                  <1>     pop   esi                           ;  into ESI
    92 0000006D 668B0E              <1>     mov   cx,[esi]                      ; Grab string length using ESI, stuff it into CX
    93 00000070 6683E902            <1>     sub   cx,2                          ; Subtract out 2 bytes for the length field
    94 00000074 83C602              <1>     add   esi,2                         ; Bump past the length field to the beginning of string
    95                              <1> PutStr1:
    96 00000077 8A1E                <1>     mov   bl,[esi]                      ; Get next character
    97 00000079 80FB0A              <1>     cmp   bl,0Ah                        ; NewLine?
    98 0000007C 751C                <1>     jne   PutStr2                       ;  No
    99 0000007E 31C0                <1>     xor   eax,eax                       ;  Yes
   100 00000080 B001                <1>     mov   al,1                          ;   Set Col
   101 00000082 A2[420C0000]        <1>     mov   [Col],al                      ;   back to
   102 00000087 A0[410C0000]        <1>     mov   al,[Row]                      ;   1 and
   103 0000008C FEC0                <1>     inc   al                            ;   bump row
   104 0000008E A2[410C0000]        <1>     mov   [Row],al                      ;   by 1
   105 00000093 E86DFFFFFF          <1>     call  CalcVideoAddr                 ; Calculate video address
   106 00000098 EB26                <1>     jmp   PutStr3                       ; Continue
   107                              <1> PutStr2:
   108 0000009A 881D[3F0C0000]      <1>     mov   [Char],bl                     ; Stash our character
   109 000000A0 E8A6FFFFFF          <1>     call  PutChar                       ; Print it out
   110 000000A5 A1[430C0000]        <1>     mov   eax,[VidAdr]                  ; Bump
   111 000000AA 83C002              <1>     add   eax,2                         ;  Video Address
   112 000000AD A3[430C0000]        <1>     mov   [VidAdr],eax                  ;  by 2
   113 000000B2 31C0                <1>     xor   eax,eax                       ; Bump
   114 000000B4 A0[420C0000]        <1>     mov   al,[Col]                      ;  Col
   115 000000B9 0401                <1>     add   al,1                          ;  by
   116 000000BB A2[420C0000]        <1>     mov   [Col],al                      ;  1
   117                              <1> PutStr3:
   118 000000C0 46                  <1>     inc   esi                           ; Bump ESI to next character in our string
   119 000000C1 E2B4                <1>     loop  PutStr1                       ; Loop (Decrement CX each time until CX is zero)
   120 000000C3 E802000000          <1>     call  MoveCursor                    ; Update cursor (do this once after displaying the string, more efficient)
   121 000000C8 61                  <1>     popa                                ; Restore registers
   122 000000C9 C3                  <1>     ret                                 ; Return to caller
   123                              <1> 
   124                              <1> ;-----------------------
   125                              <1> ; Update hardware cursor
   126                              <1> ;-----------------------
   127                              <1> MoveCursor:
   128 000000CA 60                  <1>     pusha                               ; Save registers
   129 000000CB 8A3D[410C0000]      <1>     mov   bh,[Row]                      ; BH = row
   130 000000D1 8A1D[420C0000]      <1>     mov   bl,[Col]                      ; BL = col
   131 000000D7 FECF                <1>     dec   bh                            ; BH-- (Make row zero based)
   132                              <1> 
   133 000000D9 31C0                <1>     xor   eax,eax                       ; Clear EAX
   134 000000DB B950000000          <1>     mov   ecx,TotCol                    ; ECX = TotCol
   135 000000E0 88F8                <1>     mov   al,bh                         ; Row
   136 000000E2 F7E1                <1>     mul   ecx                           ;  * TotCol
   137 000000E4 00D8                <1>     add   al,bl                         ;  + Col
   138 000000E6 89C3                <1>     mov   ebx,eax                       ; Save result in EBX (BL,BH in particular)
   139                              <1> 
   140 000000E8 31C0                <1>     xor   eax,eax                       ; Clear EAX
   141 000000EA 66BAD403            <1>     mov   dx,03D4h                      ; Set VGA port to  03D4h (Video controller register select)
   142 000000EE B00F                <1>     mov   al,0Fh                        ; Set VGA port-index 0Fh (cursor location low byte)
   143 000000F0 EE                  <1>     out   dx,al                         ; Write to the VGA port
   144 000000F1 66BAD503            <1>     mov   dx,03D5h                      ; Set VGA port to  03D5h (Video controller data)
   145 000000F5 88D8                <1>     mov   al,bl                         ; Set low byte of calculated cursor position from above
   146 000000F7 EE                  <1>     out   dx,al                         ; Write to the VGA port
   147                              <1> 
   148 000000F8 31C0                <1>     xor   eax,eax                       ; Clear EAX
   149 000000FA 66BAD403            <1>     mov   dx,03D4h                      ; Set VGA port to  03D4h (Video controller register select)
   150 000000FE B00E                <1>     mov   al,0Eh                        ; Set VGA port-index 0Fh (cursor location high byte)
   151 00000100 EE                  <1>     out   dx,al                         ; Write to the VGA port
   152 00000101 66BAD503            <1>     mov   dx,03D5h                      ; Set VGA port to  03D5h (Video controller data)
   153 00000105 88F8                <1>     mov   al,bh                         ; Set high byte of calculated cursor position from above
   154 00000107 EE                  <1>     out   dx,al                         ; Write to the VGA port
   155                              <1> 
   156 00000108 61                  <1>     popa                                ; Restore registers
   157 00000109 C3                  <1>     ret                                 ; Return to caller
   158                              <1> 
   159                              <1> ;-------------
   160                              <1> ; Clear Screen
   161                              <1> ;-------------
   162                              <1> ClrScr:
   163 0000010A 60                  <1>     pusha                               ; Save registers
   164 0000010B FC                  <1>     cld                                 ; Clear DF Flag, REP STOSW increments EDI
   165 0000010C BF00800B00          <1>     mov   edi,VidMem                    ; Set EDI to beginning of Video Memory
   166 00000111 31C9                <1>     xor   ecx,ecx                       ; 2,000 'words'
   167 00000113 66B9D007            <1>     mov   cx,2000                       ;  on the screen
   168 00000117 8A25[3E0C0000]      <1>     mov   ah,[ColorAttr]                ; Set color attribute
   169 0000011D B020                <1>     mov   al,' '                        ; We're going to 'blank' out the screen
   170 0000011F F366AB              <1>     rep   stosw                         ; Move AX to video memory pointed to by EDI, Repeat CX times, increment EDI each time
   171 00000122 B001                <1>     mov   al,1
   172 00000124 A2[420C0000]        <1>     mov   [Col],al                      ; Set Col to 1
   173 00000129 A2[410C0000]        <1>     mov   [Row],al                      ; Set Row to 1
   174 0000012E 61                  <1>     popa                                ; Restore registers
   175 0000012F C3                  <1>     ret                                 ; Return to caller
   176                              <1> 
   177                              <1> ;-------------------
   178                              <1> ; Set Color Attribute
   179                              <1> ;-------------------
   180                              <1> SetColorAttr:
   181 00000130 60                  <1>     pusha                               ; Save registers
   182 00000131 A0[3C0C0000]        <1>     mov   al,[ColorBack]                ; Background color (e.g. 3)
   183 00000136 C0E004              <1>     shl   al,4                          ;  goes in highest 4 bits of AL
   184 00000139 8A1D[3D0C0000]      <1>     mov   bl,[ColorFore]                ; Foreground color in lowest 4 bits of BL (e.g. F)
   185 0000013F 09D8                <1>     or    eax,ebx                       ; AL now has the combination of background and foreground (e.g. 3F)
   186 00000141 A2[3E0C0000]        <1>     mov   [ColorAttr],al                ; Save result in ColorAttr
   187 00000146 61                  <1>     popa                                ; Restore registers
   188 00000147 C3                  <1>     ret                                 ; Return to caller
   189                              <1> 
   190                              <1> ;-----------------
   191                              <1> ; Scroll Screen Up
   192                              <1> ;-----------------
   193                              <1> ScrollUp:
   194 00000148 60                  <1>     pusha
   195 00000149 BEA0800B00          <1>     mov   esi,VidMem + 160              ; start of row 2
   196 0000014E BF00800B00          <1>     mov   edi,VidMem                    ; start of row 1
   197 00000153 B980070000          <1>     mov   ecx,24*80                     ; 24 rows × 80 columns
   198 00000158 F366A5              <1>     rep   movsw                         ; copy each word (char+attr)
   199                              <1>     ; Clear bottom row
   200 0000015B 66B82000            <1>     mov   ax,' '                        ; space character
   201 0000015F 8A25[3E0C0000]      <1>     mov   ah,[ColorAttr]                ; current color
   202 00000165 BF008F0B00          <1>     mov   edi,VidMem + 24*160           ; start of row 25
   203 0000016A B950000000          <1>     mov   ecx,80
   204                              <1> ScrollClr:
   205 0000016F 66AB                <1>     stosw
   206 00000171 E2FC                <1>     loop  ScrollClr
   207 00000173 61                  <1>     popa
   208 00000174 C3                  <1>     ret
    16                                  
    17                                  ;--------------------------------------------------------------------------------------------------
    18                                  ; Install our IDT
    19                                  ;--------------------------------------------------------------------------------------------------
    20                                  InstallIDT:
    21 00000175 FA                          cli                                 ; Disable interrupts
    22 00000176 60                          pusha                               ; Save registers
    23 00000177 0F011D[BC0B0000]            lidt  [IDT2]                        ; Load IDT into IDTR
    24 0000017E BF[BC030000]                mov   edi,IDT1                      ; Set EDI to beginning of IDT
    25 00000183 66B90008                    mov   cx,2048                       ; 2048 bytes in IDT
    26 00000187 31C0                        xor   eax,eax                       ; Set all 256 IDT entries to NULL (0h)
    27 00000189 F3AA                        rep   stosb                         ; Move AL to IDT pointed to by EDI, Repeat CX times, increment EDI each time
    28 0000018B FB                          sti                                 ; Enable interrupts
    29 0000018C 61                          popa                                ; Restore registers
    30 0000018D C3                          ret                                 ; All done!
    31                                  
    32                                  ;--------------------------------------------------------------------------------------------------
    33                                  ; Keyboard Routines
    34                                  ;--------------------------------------------------------------------------------------------------
    35                                  KbRead:
    36                                      ;--------------
    37                                      ; Read scancode
    38                                      ;--------------
    39 0000018E B9FFFF0200                  mov   ecx,2FFFFh                    ; Set count for loop
    40                                  KbWait:
    41 00000193 E464                        in    al,064h                       ; Read 8042 Status Register (bit 1 is input buffer status (0=empty, 1=full)
    42 00000195 A801                        test  al,1                          ; If bit 1
    43 00000197 750A                        jnz   KbGetIt                       ;  go get scancode
    44 00000199 E2F8                        loop  KbWait                        ; Keep looping
    45 0000019B B0FF                        mov   al,0FFh                       ; No scan
    46 0000019D A2[400C0000]                mov   [KbChar],al                   ;  code received
    47 000001A2 C3                          ret                                 ; All done!
    48                                  KbGetIt:
    49 000001A3 E460                        in    al,060h                       ; Obtain scancode from
    50 000001A5 A2[400C0000]                mov   [KbChar],al                   ;   Keyboard I/O Port
    51 000001AA C3                          ret                                 ; All done!
    52                                      ;-------------------
    53                                      ; Translate scancode
    54                                      ;-------------------
    55                                  KbXlate:
    56 000001AB 31C0                        xor   eax,eax
    57 000001AD 31F6                        xor   esi,esi
    58 000001AF B9[590C0000]                mov   ecx,ScancodeSz
    59 000001B4 A0[400C0000]                mov   al,[KbChar]                   ; Put scancode in AL
    60                                  KbXlateLoop1:
    61 000001B9 3A86[570C0000]              cmp   al,[Scancode+ESI]             ; Compare to Scancode
    62 000001BF 7407                        je    KbXlateFound                  ; Match!
    63 000001C1 46                          inc   esi                           ; Bump ESI
    64 000001C2 E2F5                        loop  KbXlateLoop1                  ; Check next
    65 000001C4 B03F                        mov   al,'?'                        ; Not found defaults to ? for now
    66 000001C6 EB06                        jmp   KbXlateDone                   ; Jump to done
    67                                  KbXlateFound:
    68 000001C8 8A86[5A0C0000]              mov   al,[CharCode+ESI]             ; Put ASCII character matching the Scancode in AL
    69                                  KbXlateDone:
    70 000001CE A2[400C0000]                mov   [KbChar],al                   ; Put translated char in KbChar
    71 000001D3 C3                          ret                                 ; All done!
    72                                  
    73                                  ;---------
    74                                  ; Hex Dump
    75                                  ;---------
    76                                  HexDump:
    77 000001D4 60                          pusha                               ; Save registers
    78 000001D5 B908000000                  mov   ecx,8                         ; Move
    79 000001DA BE[340C0000]                mov   esi,Buffer+2                  ;  8
    80 000001DF B020                        mov   al,020h                       ;  spaces
    81                                  HexDump1:                               ;  to
    82 000001E1 8806                        mov   [esi],al                      ;  clear
    83 000001E3 46                          inc   esi                           ;  out
    84 000001E4 E2FB                        loop  HexDump1                      ;  Buffer
    85 000001E6 B908000000                  mov   ecx,8                         ; Setup
    86 000001EB 31D2                        xor   edx,edx                       ;  for translating
    87 000001ED 8A15[400C0000]              mov   dl,[KbChar]                   ;  the keyboard
    88 000001F3 BB[470C0000]                mov   ebx,HexDigits                 ;  scancode
    89 000001F8 BE[3B0C0000]                mov   esi,Buffer+9                  ;  to hex display
    90                                  HexDump2:
    91 000001FD 88D0                        mov   al,dl                         ; Translate
    92 000001FF 240F                        and   al,15                         ;  each
    93 00000201 D7                          xlat                                ;  hex
    94 00000202 8806                        mov   [esi],al                      ;  digit
    95 00000204 4E                          dec   esi                           ;  and put
    96 00000205 C1EA04                      shr   edx,4                         ;  it in
    97 00000208 E2F3                        loop  HexDump2                      ;  Buffer
    98 0000020A 61                          popa                                ; Restore registers
    99 0000020B C3                          ret                                 ; Return to caller
   100                                  
   101                                  ;--------------------------------------------------------------------------------------------------
   102                                  ; Stage3 - Our Kernel code starts executing here!
   103                                  ;--------------------------------------------------------------------------------------------------
   104                                  Stage3:
   105                                      ;--------------
   106                                      ; Set registers
   107                                      ;--------------
   108 0000020C 66B81000                    mov   ax,10h                        ; Set data
   109 00000210 8ED8                        mov   ds,ax                         ;  segments to
   110 00000212 8ED0                        mov   ss,ax                         ;  data selector
   111 00000214 8EC0                        mov   es,ax                         ;  (10h)
   112 00000216 BC00000900                  mov   esp,90000h                    ; Stack begins from 90000h
   113                                  
   114 0000021B E855FFFFFF                  call  InstallIDT                    ; Install our Interrupt Descriptor Table
   115                                  
   116                                      ;-------------
   117                                      ; Clear screen
   118                                      ;-------------
   119 00000220 B000                        mov   al,Black                      ; Background
   120 00000222 A2[3C0C0000]                mov   [ColorBack],al                ;  color
   121 00000227 B005                        mov   al,Purple                     ; Foreground
   122 00000229 A2[3D0C0000]                mov   [ColorFore],al                ;  color
   123 0000022E E8FDFEFFFF                  call  SetColorAttr                  ; Set color
   124 00000233 E8D2FEFFFF                  call  ClrScr                        ; Clear screen
   125                                  
   126                                      ;--------------
   127                                      ; Print success
   128                                      ;--------------
   129 00000238 B00A                        mov   al,10                         ; Set
   130 0000023A A2[410C0000]                mov   [Row],al                      ;  Row,Col
   131 0000023F B001                        mov   al,1                          ;  to
   132 00000241 A2[420C0000]                mov   [Col],al                      ;  10,1
   133 00000246 BB[C20B0000]                mov   ebx,Msg1                      ; Put
   134 0000024B E813FEFFFF                  call  PutStr                        ;  Msg1
   135 00000250 BB[2F0C0000]                mov   ebx,NewLine                   ; Put
   136 00000255 E809FEFFFF                  call  PutStr                        ;  a New Line
   137 0000025A BB[E40B0000]                mov   ebx,Msg2                      ; Put
   138 0000025F E8FFFDFFFF                  call  PutStr                        ;  Msg2
   139                                  
   140                                      ;------------------------
   141                                      ; Initialize the 8259 PIC
   142                                      ;------------------------
   143 00000264 B011                        mov   al,00010001b                  ; Set ICW1
   144 00000266 E620                        out   PIC1_CTRL,al                  ;  Intialize
   145 00000268 E6A0                        out   PIC2_CTRL,al                  ;  8259
   146 0000026A B020                        mov   al,020h                       ; Set ICW2
   147 0000026C E621                        out   PIC1_DATA,al                  ;  Map
   148 0000026E B028                        mov   al,028h                       ;  IRQs
   149 00000270 E6A1                        out   PIC2_DATA,al                  ;  32-47
   150 00000272 B004                        mov   al,00000100b                  ; Set ICW3
   151 00000274 E621                        out   PIC1_DATA,al                  ;  Connect PIC1
   152 00000276 B002                        mov   al,00000010b                  ;  and PIC2
   153 00000278 E6A1                        out   PIC2_DATA,al                  ;  via IRQ line 2
   154 0000027A B001                        mov   al,00000001b                  ; Set ICW4
   155 0000027C E621                        out   PIC1_DATA,al                  ;  We are in
   156 0000027E E6A1                        out   PIC2_DATA,al                  ;  80x86 mode
   157 00000280 E8FF000000                  call  SetPIT                        ; Configure the PIT for timer interrupts
   158                                  
   159                                      ;--------------
   160                                      ; Set Timer IDT
   161                                      ;--------------
   162 00000285 BA20000000                  mov   edx,020h                      ; Timer IRQ 0 is now IRQ 32 (020h)
   163 0000028A C1E203                      shl   edx,3                         ; Position into
   164 0000028D 81C2[BC030000]              add   edx,IDT                       ;  the IDT
   165 00000293 66B8008E                    mov   ax,08E00h                     ; Stash
   166 00000297 66894204                    mov   [EDX+4],ax                    ;  stuff
   167 0000029B B8[93030000]                mov   eax,IsrTimer                  ;  into
   168 000002A0 668902                      mov   [edx],ax                      ;  the IDT
   169 000002A3 C1E810                      shr   eax,16                        ;  to link IRQ 32
   170 000002A6 66894206                    mov   [EDX+6],ax                    ;  to the
   171 000002AA 66B80800                    mov   ax,008h                       ;  correct ISR
   172 000002AE 66894202                    mov   [EDX+2],ax                    ;  which is IsrTimer
   173 000002B2 FB                          sti                                 ; Enable interrupts globally
   174 000002B3 F4                          hlt                                 ; Halt and wait for timer interrupt to get us going again
   175                                      ;--------------------
   176                                      ; ISR - Timer started
   177                                      ;--------------------
   178 000002B4 BB[2F0C0000]                mov   ebx,NewLine                   ; Put
   179 000002B9 E8A5FDFFFF                  call  PutStr                        ;  a New Line
   180 000002BE BB[1C0C0000]                mov   ebx,Msg4                      ; Put
   181 000002C3 E89BFDFFFF                  call  PutStr                        ;  Msg4
   182 000002C8 C705[610C0000]0300-         mov   dword [SleepTicks],3         ; 3 seconds ≈ 54 ticks
   182 000002D0 0000               
   183 000002D2 E8C9000000                  call  Sleep                         ; Sleep for 3 seconds
   184                                      ;call  ClrScr                        ; Clear screen again
   185                                      ;-------------------
   186                                      ; Get Keyboard input
   187                                      ;-------------------
   188 000002D7 FA                          cli                                 ; No Interrupts!
   189                                  ClearKbBuffer:
   190 000002D8 E8B1FEFFFF                  call  KbRead                        ; Read the keyboard
   191 000002DD A0[400C0000]                mov   al,[KbChar]                   ; If nothing
   192 000002E2 3CFF                        cmp   al,0FFh                       ;  read then
   193 000002E4 74F2                        je    ClearKbBuffer                 ;  jump back
   194 000002E6 B000                        mov   al,0                          ; Set starting
   195 000002E8 A2[410C0000]                mov   [Row],al                      ;  Row
   196 000002ED B001                        mov   al,1                          ;  and Col
   197 000002EF A2[420C0000]                mov   [Col],al                      ;  for hex output
   198                                  GetKey:
   199 000002F4 E895FEFFFF                  call  KbRead                        ; Read the keyboard
   200 000002F9 A0[400C0000]                mov   al,[KbChar]                   ; If nothing
   201 000002FE 3CFF                        cmp   al,0FFh                       ;  read then
   202 00000300 74F2                        je    GetKey                        ;  jump back
   203 00000302 E8CDFEFFFF                  call  HexDump                       ; Translate to hex display
   204 00000307 A0[410C0000]                mov   al,[Row]                      ; Bump
   205 0000030C 0401                        add   al,1                          ;  Row
   206 0000030E A2[410C0000]                mov   [Row],al                      ;  by 1
   207 00000313 B001                        mov   al,1                          ; Reset
   208 00000315 A2[420C0000]                mov   [Col],al                      ;  Col to 1
   209 0000031A BB[320C0000]                mov   ebx,Buffer                    ; Put hex out at upper left
   210 0000031F E83FFDFFFF                  call  PutStr                        ;  corner of the screen
   211 00000324 E882FEFFFF                  call  KbXlate                       ; Translate scancode to ASCII
   212 00000329 B001                        mov   al,1                          ; Reset
   213 0000032B A2[420C0000]                mov   [Col],al                      ;  Col to 1
   214 00000330 A0[410C0000]                mov   al,[Row]                      ; Bump
   215 00000335 0401                        add   al,1                          ;  Row
   216 00000337 A2[410C0000]                mov   [Row],al                      ;  by 1
   217 0000033C E8C4FCFFFF                  call  CalcVideoAddr                 ; Put the keyboard
   218 00000341 8A1D[400C0000]              mov   bl,[KbChar]                   ;  character
   219 00000347 881D[3F0C0000]              mov   [Char],bl                     ;  on that
   220 0000034D E8F9FCFFFF                  call  PutChar                       ;  row
   221 00000352 E873FDFFFF                  call  MoveCursor                    ; Update cursor
   222 00000357 8A1D[400C0000]              mov   bl,[KbChar]                   ; Quit
   223 0000035D 80FB71                      cmp   bl,071h                       ;  when q (ASCII 071h)
   224 00000360 7402                        je    AllDone                       ;  is pressed
   225 00000362 EB90                        jmp   GetKey                        ; Loop
   226                                  
   227                                  AllDone:
   228                                      ;---------------
   229                                      ; Print shutdown
   230                                      ;---------------
   231 00000364 BB[2F0C0000]                mov   ebx,NewLine                   ; Put
   232 00000369 E8F5FCFFFF                  call  PutStr                        ;  a New Line
   233 0000036E BB[2F0C0000]                mov   ebx,NewLine                   ; Put
   234 00000373 E8EBFCFFFF                  call  PutStr                        ;  a New Line
   235 00000378 BB[060C0000]                mov   ebx,Msg3                      ; Put
   236 0000037D E8E1FCFFFF                  call  PutStr                        ;  Msg3
   237                                  
   238                                      ;---------------
   239                                      ; Stop execution
   240                                      ;---------------
   241 00000382 FA                          cli                                 ; Disable interrupts
   242 00000383 F4                          hlt                                 ; Halt
   243                                  
   244                                  
   245                                  ;----------------------------------------------
   246                                  ; Configure PIT for 18.2 Hz (default frequency)
   247                                  ;----------------------------------------------
   248                                  SetPIT:
   249 00000384 B036                        mov   al,00110110b                  ; Set PIT to Mode 3 (Square Wave Generator)
   250 00000386 E643                        out   43h,al                        ; Write to PIT control port
   251 00000388 66B8FFFF                    mov   ax,0FFFFh                     ; Divisor for 18.2 Hz (default)
   252 0000038C E640                        out   40h,al                        ; Write low byte of divisor
   253 0000038E 88E0                        mov   al,ah                         ; Write high byte of divisor
   254 00000390 E640                        out   40h,al
   255 00000392 C3                          ret
   256                                  
   257                                  ;----------
   258                                  ; ISR Timer
   259                                  ;----------
   260                                  IsrTimer:
   261 00000393 60                          pushad
   262 00000394 FF05[5D0C0000]              inc   dword [TimerTicks]            ; Increment the tick counter
   263 0000039A B020                        mov   al,020h                       ; Send EOI - End of Interrupt
   264 0000039C E620                        out   PIC1_CTRL,al                  ;  to master PIC
   265 0000039E 61                          popad
   266 0000039F CF                          iretd
   267                                  
   268                                  ;----------------------------------------------------------
   269                                  ; Sleep for approximately the number of ticks in SleepTicks
   270                                  ;----------------------------------------------------------
   271                                  Sleep:
   272 000003A0 50                          push eax
   273 000003A1 51                          push ecx
   274                                  
   275 000003A2 8B0D[5D0C0000]              mov ecx,[TimerTicks]               ; Get current tick count
   276 000003A8 030D[610C0000]              add ecx,[SleepTicks]               ; Target tick count = now + SleepTicks
   277                                  
   278                                  SleepWait:
   279 000003AE 390D[5D0C0000]              cmp [TimerTicks],ecx              ; Has target tick been reached?
   280 000003B4 7303                        jae SleepDone                     ; If yes (TimerTicks >= ecx), exit
   281 000003B6 F4                          hlt                               ; Halt until next interrupt
   282 000003B7 EBF5                        jmp SleepWait                     ; Check again
   283                                  
   284                                  SleepDone:
   285 000003B9 59                          pop ecx
   286 000003BA 58                          pop eax
   287 000003BB C3                          ret
   288                                  
   289                                  ;--------------------------------------------------------------------------------------------------
   290                                  ; Interrupt Descriptor Table (IDT)
   291                                  ;--------------------------------------------------------------------------------------------------
   292                                  IDT:
   293                                  IDT1:
   294 000003BC 00<rep 800h>            TIMES 2048  db 0                        ; The IDT is exactly 2048 bytes - 256 entries 8 bytes each
   295                                  ;-------------------
   296                                  ; pointer to our IDT
   297                                  ;-------------------
   298                                  IDT2:
   299 00000BBC FF07                                      dw  IDT2-IDT1-1       ; limit (Size of IDT)
   300 00000BBE [BC030000]                                dd  IDT1              ; base of IDT
   301                                  
   302                                  ;--------------------------------------------------------------------------------------------------
   303                                  ; Working Storage
   304                                  ;--------------------------------------------------------------------------------------------------
   305                                  %macro String 2
   306                                  %1          dw  %%EndStr-%1
   307                                              db  %2
   308                                  %%EndStr:
   309                                  %endmacro
   310                                  String  Msg1,"------   AsmOSx86 v0.0.1   -----"
   306 00000BC2 2200                <1> %1 dw %%EndStr-%1
   307 00000BC4 2D2D2D2D2D2D202020- <1>  db %2
   307 00000BCD 41736D4F5378383620- <1>
   307 00000BD6 76302E302E31202020- <1>
   307 00000BDF 2D2D2D2D2D          <1>
   308                              <1> %%EndStr:
   311                                  String  Msg2,"--------  32 Bit Kernel --------"
   306 00000BE4 2200                <1> %1 dw %%EndStr-%1
   307 00000BE6 2D2D2D2D2D2D2D2D20- <1>  db %2
   307 00000BEF 20333220426974204B- <1>
   307 00000BF8 65726E656C202D2D2D- <1>
   307 00000C01 2D2D2D2D2D          <1>
   308                              <1> %%EndStr:
   312                                  String  Msg3,"AsmOSx86 has ended!!"
   306 00000C06 1600                <1> %1 dw %%EndStr-%1
   307 00000C08 41736D4F5378383620- <1>  db %2
   307 00000C11 68617320656E646564- <1>
   307 00000C1A 2121                <1>
   308                              <1> %%EndStr:
   313                                  String  Msg4,"ISR Timer Started"
   306 00000C1C 1300                <1> %1 dw %%EndStr-%1
   307 00000C1E 4953522054696D6572- <1>  db %2
   307 00000C27 2053746172746564    <1>
   308                              <1> %%EndStr:
   314                                  String  NewLine,0Ah
   306 00000C2F 0300                <1> %1 dw %%EndStr-%1
   307 00000C31 0A                  <1>  db %2
   308                              <1> %%EndStr:
   315                                  String  Buffer,"XXXXXXXX"
   306 00000C32 0A00                <1> %1 dw %%EndStr-%1
   307 00000C34 5858585858585858    <1>  db %2
   308                              <1> %%EndStr:
   316                                  
   317 00000C3C 00                      ColorBack   db  0                       ; Background color (00h - 0Fh)
   318 00000C3D 00                      ColorFore   db  0                       ; Foreground color (00h - 0Fh)
   319 00000C3E 00                      ColorAttr   db  0                       ; Combination of background and foreground color (e.g. 3Fh 3=cyan background,F=white text)
   320 00000C3F 00                      Char        db  0                       ; ASCII character
   321 00000C40 00                      KbChar      db  0                       ; Keyboard character
   322 00000C41 00                      Row         db  0                       ; Row (1-25)
   323 00000C42 00                      Col         db  0                       ; Col (1-80)
   324 00000C43 00000000                VidAdr      dd  0                       ; Video Address
   325 00000C47 303132333435363738-     HexDigits   db  "0123456789ABCDEF"
   325 00000C50 39414243444546     
   326                                  
   327 00000C57 1011                    Scancode    db  10h, 11h
   328 00000C59 02                      ScancodeSz  db  ScancodeSz-Scancode
   329 00000C5A 7177                    CharCode    db  71h, 77h
   330 00000C5C 02                      CharCodeSz  db  ScancodeSz-Scancode
   331                                  
   332 00000C5D 00000000                TimerTicks  dd  0                       ; Counter for timer ticks
   333 00000C61 00000000                SleepTicks  dd  0                       ; Number of ticks to sleep
   334                                  
   335                                  ;--------------------------------------------------------------------------------------------------
   336                                  ; Video
   337                                  ;--------------------------------------------------------------------------------------------------
   338                                  VidMem      equ 0B8000h                 ; Video Memory (Starting Address)
   339                                  TotCol      equ 80                      ; width and height of screen
   340                                  Black       equ 00h                     ; Black
   341                                  Cyan        equ 03h                     ; Cyan
   342                                  Purple      equ 05h                     ; Purple
   343                                  White       equ 0Fh                     ; White
   344                                  
   345                                  ;--------------------------------------------------------------------------------------------------
   346                                  ; PIC - 8259 Programmable Interrupt Controller
   347                                  ;--------------------------------------------------------------------------------------------------
   348                                  PIC1        equ 020h                    ; PIC - Master
   349                                  PIC2        equ 0A0h                    ; PIC - Slave
   350                                  PIC1_CTRL   equ PIC1                    ; PIC1 Command port
   351                                  PIC1_DATA   equ PIC1+1                  ; PIC1 Data port
   352                                  PIC2_CTRL   equ PIC2                    ; PIC2 Command port
   353                                  PIC2_DATA   equ PIC2+1                  ; PIC2 Data port
