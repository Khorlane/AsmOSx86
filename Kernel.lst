     1                                  ;**********************************************************
     2                                  ; Kernel.asm
     3                                  ;   A basic 32 bit binary kernel
     4                                  ;
     5                                  ; nasm -f bin Kernel.asm -o Kernel.bin -l Kernel.lst
     6                                  ;**********************************************************
     7                                  
     8                                  [bits  32]                              ; 32 bit code
     9                                      org   100000h                       ; Kernel starts at 1 MB
    10 00000000 E9EA010000                  jmp   Stage3                        ; Jump to entry point
    11                                  
    12                                  ;--------------------------------------------------------------------------------------------------
    13                                  ; Include Major Components
    14                                  ;--------------------------------------------------------------------------------------------------
    15                                  %include "Video.asm"                    ; Include video routines
     1                              <1> ;**********************************************************
     2                              <1> ; Video.asm
     3                              <1> ;   Video routines for kernel
     4                              <1> ;   Provides basic video output functions
     5                              <1> ;   such as printing characters and strings to the screen
     6                              <1> ;   and updating the hardware cursor.
     7                              <1> ;**********************************************************
     8                              <1> 
     9                              <1> ;--------------------------------------------------------------------------------------------------
    10                              <1> ; Video Routines
    11                              <1> ;--------------------------------------------------------------------------------------------------
    12                              <1> 
    13                              <1> ;---------------
    14                              <1> ;- Color Codes -
    15                              <1> ;---------------
    16                              <1> ;  0 0 Black
    17                              <1> ;  1 1 Blue
    18                              <1> ;  2 2 Green
    19                              <1> ;  3 3 Cyan
    20                              <1> ;  4 4 Red
    21                              <1> ;  5 5 Magenta
    22                              <1> ;  6 6 Brown
    23                              <1> ;  7 7 White
    24                              <1> ;  8 8 Gray
    25                              <1> ;  9 9 Light Blue
    26                              <1> ; 10 A Light Green
    27                              <1> ; 11 B Light Cyan
    28                              <1> ; 12 C Light Red
    29                              <1> ; 13 D Light Magenta
    30                              <1> ; 14 E Yellow
    31                              <1> ; 15 F Bright White
    32                              <1> ; Example 3F
    33                              <1> ;         ^^
    34                              <1> ;         ||
    35                              <1> ;         ||- Foreground F = White
    36                              <1> ;         |-- Background 3 = Cyan
    37                              <1> 
    38                              <1> ;------------------------------------------
    39                              <1> ; Routine to calculate video memory address
    40                              <1> ;   represented by the given Row,Col
    41                              <1> ;------------------------------------------
    42                              <1> CalcVideoAddr:
    43 00000005 60                  <1>     pusha                               ; Save registers
    44 00000006 A0[6C0C0000]        <1>     mov   al,[Row]                      ; If Row is
    45 0000000B 3C19                <1>     cmp   al,25                         ;  is less than 25
    46 0000000D 7C0C                <1>     jl    CalcVideoAddr1                ;  go to CalcVideoAddr1
    47 0000000F B018                <1>     mov   al,24                         ; Set row to 24
    48 00000011 A2[6C0C0000]        <1>     mov   [Row],al                      ;  and save it
    49 00000016 E82D010000          <1>     call ScrollUp                       ;  and scroll up the screen
    50                              <1> CalcVideoAddr1:    
    51 0000001B 31C0                <1>     xor   eax,eax                       ; Row calculation
    52 0000001D A0[6C0C0000]        <1>     mov   al,[Row]                      ;  row
    53 00000022 48                  <1>     dec   eax                           ;  minus 1
    54 00000023 BAA0000000          <1>     mov   edx,160                       ;  times
    55 00000028 F7E2                <1>     mul   edx                           ;  160
    56 0000002A 50                  <1>     push  eax                           ;  save it
    57 0000002B 31C0                <1>     xor   eax,eax                       ; Col calculation
    58 0000002D A0[6D0C0000]        <1>     mov   al,[Col]                      ;  col
    59 00000032 BA02000000          <1>     mov   edx,2                         ;  times
    60 00000037 F7E2                <1>     mul   edx                           ;  2
    61 00000039 83E802              <1>     sub   eax,2                         ;  minus 2
    62 0000003C 5A                  <1>     pop   edx                           ; Add col calculation
    63 0000003D 01D0                <1>     add   eax,edx                       ;  to row calculation
    64 0000003F 0500800B00          <1>     add   eax,VidMem                    ;  plus VidMem
    65 00000044 A3[6E0C0000]        <1>     mov   [VidAdr],eax                  ; Save in VidAdr
    66 00000049 61                  <1>     popa                                ; Restore registers
    67 0000004A C3                  <1>     ret                                 ; Return to caller
    68                              <1> 
    69                              <1> ;------------------------------
    70                              <1> ; Put a character on the screen
    71                              <1> ; EDI = address in video memory
    72                              <1> ;------------------------------
    73                              <1> PutChar:
    74 0000004B 60                  <1>     pusha                               ; Save registers
    75 0000004C 8B3D[6E0C0000]      <1>     mov   edi,[VidAdr]                  ; EDI = Video Address
    76 00000052 8A15[6A0C0000]      <1>     mov   dl,[Char]                     ; DL = character
    77 00000058 8A35[690C0000]      <1>     mov   dh,[ColorAttr]                ; DH = attribute
    78 0000005E 668917              <1>     mov   [edi],dx                      ; Move attribute and character to video display
    79 00000061 61                  <1>     popa                                ; Restore registers
    80 00000062 C3                  <1>     ret                                 ; Return to caller
    81                              <1> 
    82                              <1> ;---------------------------------
    83                              <1> ; Print a null terminated string
    84                              <1> ; EBX = address of string to print
    85                              <1> ;---------------------------------
    86                              <1> PutStr:
    87 00000063 60                  <1>     pusha                               ; Save registers
    88 00000064 E89CFFFFFF          <1>     call  CalcVideoAddr                 ; Calculate video address
    89 00000069 31C9                <1>     xor   ecx,ecx                       ; Clear ECX
    90 0000006B 53                  <1>     push  ebx                           ; Copy the string address in EBX
    91 0000006C 5E                  <1>     pop   esi                           ;  into ESI
    92 0000006D 668B0E              <1>     mov   cx,[esi]                      ; Grab string length using ESI, stuff it into CX
    93 00000070 6683E902            <1>     sub   cx,2                          ; Subtract out 2 bytes for the length field
    94 00000074 83C602              <1>     add   esi,2                         ; Bump past the length field to the beginning of string
    95                              <1> PutStr1:
    96 00000077 8A1E                <1>     mov   bl,[esi]                      ; Get next character
    97 00000079 80FB0A              <1>     cmp   bl,0Ah                        ; NewLine?
    98 0000007C 751C                <1>     jne   PutStr2                       ;  No
    99 0000007E 31C0                <1>     xor   eax,eax                       ;  Yes
   100 00000080 B001                <1>     mov   al,1                          ;   Set Col
   101 00000082 A2[6D0C0000]        <1>     mov   [Col],al                      ;   back to
   102 00000087 A0[6C0C0000]        <1>     mov   al,[Row]                      ;   1 and
   103 0000008C FEC0                <1>     inc   al                            ;   bump row
   104 0000008E A2[6C0C0000]        <1>     mov   [Row],al                      ;   by 1
   105 00000093 E86DFFFFFF          <1>     call  CalcVideoAddr                 ; Calculate video address
   106 00000098 EB26                <1>     jmp   PutStr3                       ; Continue
   107                              <1> PutStr2:
   108 0000009A 881D[6A0C0000]      <1>     mov   [Char],bl                     ; Stash our character
   109 000000A0 E8A6FFFFFF          <1>     call  PutChar                       ; Print it out
   110 000000A5 A1[6E0C0000]        <1>     mov   eax,[VidAdr]                  ; Bump
   111 000000AA 83C002              <1>     add   eax,2                         ;  Video Address
   112 000000AD A3[6E0C0000]        <1>     mov   [VidAdr],eax                  ;  by 2
   113 000000B2 31C0                <1>     xor   eax,eax                       ; Bump
   114 000000B4 A0[6D0C0000]        <1>     mov   al,[Col]                      ;  Col
   115 000000B9 0401                <1>     add   al,1                          ;  by
   116 000000BB A2[6D0C0000]        <1>     mov   [Col],al                      ;  1
   117                              <1> PutStr3:
   118 000000C0 46                  <1>     inc   esi                           ; Bump ESI to next character in our string
   119 000000C1 E2B4                <1>     loop  PutStr1                       ; Loop (Decrement CX each time until CX is zero)
   120 000000C3 E802000000          <1>     call  MoveCursor                    ; Update cursor (do this once after displaying the string, more efficient)
   121 000000C8 61                  <1>     popa                                ; Restore registers
   122 000000C9 C3                  <1>     ret                                 ; Return to caller
   123                              <1> 
   124                              <1> ;-----------------------
   125                              <1> ; Update hardware cursor
   126                              <1> ;-----------------------
   127                              <1> MoveCursor:
   128 000000CA 60                  <1>     pusha                               ; Save registers
   129 000000CB 8A3D[6C0C0000]      <1>     mov   bh,[Row]                      ; BH = row
   130 000000D1 8A1D[6D0C0000]      <1>     mov   bl,[Col]                      ; BL = col
   131 000000D7 FECF                <1>     dec   bh                            ; BH-- (Make row zero based)
   132                              <1> 
   133 000000D9 31C0                <1>     xor   eax,eax                       ; Clear EAX
   134 000000DB B950000000          <1>     mov   ecx,TotCol                    ; ECX = TotCol
   135 000000E0 88F8                <1>     mov   al,bh                         ; Row
   136 000000E2 F7E1                <1>     mul   ecx                           ;  * TotCol
   137 000000E4 00D8                <1>     add   al,bl                         ;  + Col
   138 000000E6 89C3                <1>     mov   ebx,eax                       ; Save result in EBX (BL,BH in particular)
   139                              <1> 
   140 000000E8 31C0                <1>     xor   eax,eax                       ; Clear EAX
   141 000000EA 66BAD403            <1>     mov   dx,03D4h                      ; Set VGA port to  03D4h (Video controller register select)
   142 000000EE B00F                <1>     mov   al,0Fh                        ; Set VGA port-index 0Fh (cursor location low byte)
   143 000000F0 EE                  <1>     out   dx,al                         ; Write to the VGA port
   144 000000F1 66BAD503            <1>     mov   dx,03D5h                      ; Set VGA port to  03D5h (Video controller data)
   145 000000F5 88D8                <1>     mov   al,bl                         ; Set low byte of calculated cursor position from above
   146 000000F7 EE                  <1>     out   dx,al                         ; Write to the VGA port
   147                              <1> 
   148 000000F8 31C0                <1>     xor   eax,eax                       ; Clear EAX
   149 000000FA 66BAD403            <1>     mov   dx,03D4h                      ; Set VGA port to  03D4h (Video controller register select)
   150 000000FE B00E                <1>     mov   al,0Eh                        ; Set VGA port-index 0Fh (cursor location high byte)
   151 00000100 EE                  <1>     out   dx,al                         ; Write to the VGA port
   152 00000101 66BAD503            <1>     mov   dx,03D5h                      ; Set VGA port to  03D5h (Video controller data)
   153 00000105 88F8                <1>     mov   al,bh                         ; Set high byte of calculated cursor position from above
   154 00000107 EE                  <1>     out   dx,al                         ; Write to the VGA port
   155                              <1> 
   156 00000108 61                  <1>     popa                                ; Restore registers
   157 00000109 C3                  <1>     ret                                 ; Return to caller
   158                              <1> 
   159                              <1> ;-------------
   160                              <1> ; Clear Screen
   161                              <1> ;-------------
   162                              <1> ClrScr:
   163 0000010A 60                  <1>     pusha                               ; Save registers
   164 0000010B FC                  <1>     cld                                 ; Clear DF Flag, REP STOSW increments EDI
   165 0000010C BF00800B00          <1>     mov   edi,VidMem                    ; Set EDI to beginning of Video Memory
   166 00000111 31C9                <1>     xor   ecx,ecx                       ; 2,000 'words'
   167 00000113 66B9D007            <1>     mov   cx,2000                       ;  on the screen
   168 00000117 8A25[690C0000]      <1>     mov   ah,[ColorAttr]                ; Set color attribute
   169 0000011D B020                <1>     mov   al,' '                        ; We're going to 'blank' out the screen
   170 0000011F F366AB              <1>     rep   stosw                         ; Move AX to video memory pointed to by EDI, Repeat CX times, increment EDI each time
   171 00000122 B001                <1>     mov   al,1
   172 00000124 A2[6D0C0000]        <1>     mov   [Col],al                      ; Set Col to 1
   173 00000129 A2[6C0C0000]        <1>     mov   [Row],al                      ; Set Row to 1
   174 0000012E 61                  <1>     popa                                ; Restore registers
   175 0000012F C3                  <1>     ret                                 ; Return to caller
   176                              <1> 
   177                              <1> ;-------------------
   178                              <1> ; Set Color Attribute
   179                              <1> ;-------------------
   180                              <1> SetColorAttr:
   181 00000130 60                  <1>     pusha                               ; Save registers
   182 00000131 A0[670C0000]        <1>     mov   al,[ColorBack]                ; Background color (e.g. 3)
   183 00000136 C0E004              <1>     shl   al,4                          ;  goes in highest 4 bits of AL
   184 00000139 8A1D[680C0000]      <1>     mov   bl,[ColorFore]                ; Foreground color in lowest 4 bits of BL (e.g. F)
   185 0000013F 09D8                <1>     or    eax,ebx                       ; AL now has the combination of background and foreground (e.g. 3F)
   186 00000141 A2[690C0000]        <1>     mov   [ColorAttr],al                ; Save result in ColorAttr
   187 00000146 61                  <1>     popa                                ; Restore registers
   188 00000147 C3                  <1>     ret                                 ; Return to caller
   189                              <1> 
   190                              <1> ;-----------------
   191                              <1> ; Scroll Screen Up
   192                              <1> ;-----------------
   193                              <1> ScrollUp:
   194 00000148 60                  <1>     pusha
   195 00000149 BEA0800B00          <1>     mov   esi,VidMem + 160              ; start of row 2
   196 0000014E BF00800B00          <1>     mov   edi,VidMem                    ; start of row 1
   197 00000153 B980070000          <1>     mov   ecx,24*80                     ; 24 rows × 80 columns
   198 00000158 F366A5              <1>     rep   movsw                         ; copy each word (char+attr)
   199                              <1>     ; Clear bottom row
   200 0000015B 66B82000            <1>     mov   ax,' '                        ; space character
   201 0000015F 8A25[690C0000]      <1>     mov   ah,[ColorAttr]                ; current color
   202 00000165 BF008F0B00          <1>     mov   edi,VidMem + 24*160           ; start of row 25
   203 0000016A B950000000          <1>     mov   ecx,80
   204                              <1> ScrollClr:
   205 0000016F 66AB                <1>     stosw
   206 00000171 E2FC                <1>     loop  ScrollClr
   207 00000173 61                  <1>     popa
   208 00000174 C3                  <1>     ret
    16                                  
    17                                  ;--------------------------------------------------------------------------------------------------
    18                                  ; Install our IDT
    19                                  ;--------------------------------------------------------------------------------------------------
    20                                  InstallIDT:
    21 00000175 FA                          cli                                 ; Disable interrupts
    22 00000176 60                          pusha                               ; Save registers
    23 00000177 0F011D[E70B0000]            lidt  [IDT2]                        ; Load IDT into IDTR
    24 0000017E BF[E7030000]                mov   edi,IDT1                      ; Set EDI to beginning of IDT
    25 00000183 66B90008                    mov   cx,2048                       ; 2048 bytes in IDT
    26 00000187 31C0                        xor   eax,eax                       ; Set all 256 IDT entries to NULL (0h)
    27 00000189 F3AA                        rep   stosb                         ; Move AL to IDT pointed to by EDI, Repeat CX times, increment EDI each time
    28 0000018B FB                          sti                                 ; Enable interrupts
    29 0000018C 61                          popa                                ; Restore registers
    30 0000018D C3                          ret                                 ; All done!
    31                                  
    32                                  ;--------------------------------------------------------------------------------------------------
    33                                  ; Keyboard Routines
    34                                  ;--------------------------------------------------------------------------------------------------
    35                                  ;-------------------
    36                                  ; Translate scancode
    37                                  ;-------------------
    38                                  KbXlate:
    39 0000018E 31C0                        xor   eax,eax
    40 00000190 31F6                        xor   esi,esi
    41 00000192 B9[850C0000]                mov   ecx,ScancodeSz
    42 00000197 A0[6B0C0000]                mov   al,[KbChar]                   ; Put scancode in AL
    43                                  KbXlateLoop1:
    44 0000019C 3A86[820C0000]              cmp   al,[Scancode+ESI]             ; Compare to Scancode
    45 000001A2 7407                        je    KbXlateFound                  ; Match!
    46 000001A4 46                          inc   esi                           ; Bump ESI
    47 000001A5 E2F5                        loop  KbXlateLoop1                  ; Check next
    48 000001A7 B03F                        mov   al,'?'                        ; Not found defaults to ? for now
    49 000001A9 EB06                        jmp   KbXlateDone                   ; Jump to done
    50                                  KbXlateFound:
    51 000001AB 8A86[860C0000]              mov   al,[CharCode+ESI]             ; Put ASCII character matching the Scancode in AL
    52                                  KbXlateDone:
    53 000001B1 A2[6B0C0000]                mov   [KbChar],al                   ; Put translated char in KbChar
    54 000001B6 C3                          ret                                 ; All done!
    55                                  
    56                                  ;---------
    57                                  ; Hex Dump
    58                                  ;---------
    59                                  HexDump:
    60 000001B7 60                          pusha                               ; Save registers
    61 000001B8 B908000000                  mov   ecx,8                         ; Move
    62 000001BD BE[5F0C0000]                mov   esi,Buffer+2                  ;  8
    63 000001C2 B020                        mov   al,020h                       ;  spaces
    64                                  HexDump1:                               ;  to
    65 000001C4 8806                        mov   [esi],al                      ;  clear
    66 000001C6 46                          inc   esi                           ;  out
    67 000001C7 E2FB                        loop  HexDump1                      ;  Buffer
    68 000001C9 B908000000                  mov   ecx,8                         ; Setup
    69 000001CE 31D2                        xor   edx,edx                       ;  for translating
    70 000001D0 8A15[6B0C0000]              mov   dl,[KbChar]                   ;  the keyboard
    71 000001D6 BB[720C0000]                mov   ebx,HexDigits                 ;  scancode
    72 000001DB BE[660C0000]                mov   esi,Buffer+9                  ;  to hex display
    73                                  HexDump2:
    74 000001E0 88D0                        mov   al,dl                         ; Translate
    75 000001E2 240F                        and   al,15                         ;  each
    76 000001E4 D7                          xlat                                ;  hex
    77 000001E5 8806                        mov   [esi],al                      ;  digit
    78 000001E7 4E                          dec   esi                           ;  and put
    79 000001E8 C1EA04                      shr   edx,4                         ;  it in
    80 000001EB E2F3                        loop  HexDump2                      ;  Buffer
    81 000001ED 61                          popa                                ; Restore registers
    82 000001EE C3                          ret                                 ; Return to caller
    83                                  
    84                                  ;--------------------------------------------------------------------------------------------------
    85                                  ; Stage3 - Our Kernel code starts executing here!
    86                                  ;--------------------------------------------------------------------------------------------------
    87                                  Stage3:
    88                                      ;--------------
    89                                      ; Set registers
    90                                      ;--------------
    91 000001EF 66B81000                    mov   ax,10h                        ; Set data
    92 000001F3 8ED8                        mov   ds,ax                         ;  segments to
    93 000001F5 8ED0                        mov   ss,ax                         ;  data selector
    94 000001F7 8EC0                        mov   es,ax                         ;  (10h)
    95 000001F9 BC00000900                  mov   esp,90000h                    ; Stack begins from 90000h
    96                                  
    97 000001FE E872FFFFFF                  call  InstallIDT                    ; Install our Interrupt Descriptor Table
    98                                  
    99                                      ;-------------
   100                                      ; Clear screen
   101                                      ;-------------
   102 00000203 B000                        mov   al,Black                      ; Background
   103 00000205 A2[670C0000]                mov   [ColorBack],al                ;  color
   104 0000020A B005                        mov   al,Purple                     ; Foreground
   105 0000020C A2[680C0000]                mov   [ColorFore],al                ;  color
   106 00000211 E81AFFFFFF                  call  SetColorAttr                  ; Set color
   107 00000216 E8EFFEFFFF                  call  ClrScr                        ; Clear screen
   108                                  
   109 0000021B E8B5010000                  call  FlushKbBuffer                 ; Flush keyboard buffer
   110                                  
   111                                      ;--------------
   112                                      ; Print success
   113                                      ;--------------
   114 00000220 B00A                        mov   al,10                         ; Set
   115 00000222 A2[6C0C0000]                mov   [Row],al                      ;  Row,Col
   116 00000227 B001                        mov   al,1                          ;  to
   117 00000229 A2[6D0C0000]                mov   [Col],al                      ;  10,1
   118 0000022E BB[ED0B0000]                mov   ebx,Msg1                      ; Put
   119 00000233 E82BFEFFFF                  call  PutStr                        ;  Msg1
   120 00000238 BB[5A0C0000]                mov   ebx,NewLine                   ; Put
   121 0000023D E821FEFFFF                  call  PutStr                        ;  a New Line
   122 00000242 BB[0F0C0000]                mov   ebx,Msg2                      ; Put
   123 00000247 E817FEFFFF                  call  PutStr                        ;  Msg2
   124                                  
   125                                      ;------------------------
   126                                      ; Initialize the 8259 PIC
   127                                      ;------------------------
   128 0000024C B011                        mov   al,00010001b                  ; Set ICW1
   129 0000024E E620                        out   PIC1_CTRL,al                  ;  Intialize
   130 00000250 E6A0                        out   PIC2_CTRL,al                  ;  8259
   131 00000252 B020                        mov   al,020h                       ; Set ICW2
   132 00000254 E621                        out   PIC1_DATA,al                  ;  Map
   133 00000256 B028                        mov   al,028h                       ;  IRQs
   134 00000258 E6A1                        out   PIC2_DATA,al                  ;  32-47
   135 0000025A B004                        mov   al,00000100b                  ; Set ICW3
   136 0000025C E621                        out   PIC1_DATA,al                  ;  Connect PIC1
   137 0000025E B002                        mov   al,00000010b                  ;  and PIC2
   138 00000260 E6A1                        out   PIC2_DATA,al                  ;  via IRQ line 2
   139 00000262 B001                        mov   al,00000001b                  ; Set ICW4
   140 00000264 E621                        out   PIC1_DATA,al                  ;  We are in
   141 00000266 E6A1                        out   PIC2_DATA,al                  ;  80x86 mode
   142 00000268 E822010000                  call  SetPIT                        ; Configure the PIT for timer interrupts
   143                                  
   144                                      ;--------------
   145                                      ; Set Timer IDT
   146                                      ;--------------
   147 0000026D BA20000000                  mov   edx,020h                      ; Timer IRQ 0 is now IRQ 32 (020h)
   148 00000272 C1E203                      shl   edx,3                         ; Position into
   149 00000275 81C2[E7030000]              add   edx,IDT                       ;  the IDT
   150 0000027B 66B8008E                    mov   ax,08E00h                     ; Stash
   151 0000027F 66894204                    mov   [EDX+4],ax                    ;  stuff
   152 00000283 B8[9E030000]                mov   eax,IsrTimer                  ;  into
   153 00000288 668902                      mov   [edx],ax                      ;  the IDT
   154 0000028B C1E810                      shr   eax,16                        ;  to link IRQ 32
   155 0000028E 66894206                    mov   [EDX+6],ax                    ;  to the
   156 00000292 66B80800                    mov   ax,008h                       ;  correct ISR
   157 00000296 66894202                    mov   [EDX+2],ax                    ;  which is IsrTimer
   158 0000029A FB                          sti                                 ; Enable interrupts globally
   159 0000029B F4                          hlt                                 ; Halt and wait for timer interrupt to get us going again
   160                                      
   161                                      ;-----------------
   162                                      ; Set Keyboard IDT  
   163                                      ;-----------------
   164 0000029C BA21000000                  mov edx,021h                       ; IRQ1 maps to vector 0x21  
   165 000002A1 C1E203                      shl edx,3                          ; Multiply by 8 (IDT entry size)
   166 000002A4 81C2[E7030000]              add edx,IDT                        ; Point to correct IDT slot
   167 000002AA 66B8008E                    mov ax,08E00h                      ; Present, DPL=0, 32-bit interrupt gate
   168 000002AE 66894204                    mov [EDX+4],ax                     ; Set access rights
   169 000002B2 B8[AB030000]                mov eax,IsrKeyboard                ; Address of ISR
   170 000002B7 8902                        mov [edx],eax                      ; Low 16 bits of offset  
   171 000002B9 C1E810                      shr eax,16                         ; High 16 bits of offset  
   172 000002BC 894206                      mov [EDX+6],eax                    ; Set high offset  
   173 000002BF 66B80800                    mov ax,008h                        ; Code segment selector  
   174 000002C3 66894202                    mov [EDX+2],ax                     ; Set segment selector
   175                                  
   176                                      ;--------------------
   177                                      ; ISR - Timer started
   178                                      ;--------------------
   179 000002C7 BB[5A0C0000]                mov   ebx,NewLine                   ; Put
   180 000002CC E892FDFFFF                  call  PutStr                        ;  a New Line
   181 000002D1 BB[470C0000]                mov   ebx,Msg4                      ; Put
   182 000002D6 E888FDFFFF                  call  PutStr                        ;  Msg4
   183 000002DB C705[8E0C0000]6400-         mov   dword [SleepTicks],100        ; 3 seconds ≈ 100 ticks
   183 000002E3 0000               
   184 000002E5 E8CF000000                  call  Sleep                         ; Sleep for 3 seconds
   185 000002EA E81BFEFFFF                  call  ClrScr                        ; Clear screen
   186                                  
   187                                      ;-------------------
   188                                      ; Get Keyboard input
   189                                      ;-------------------
   190 000002EF B000                        mov   al,0                          ; Set starting
   191 000002F1 A2[6C0C0000]                mov   [Row],al                      ;  Row
   192 000002F6 B001                        mov   al,1                          ;  and Col
   193 000002F8 A2[6D0C0000]                mov   [Col],al                      ;  for hex output
   194                                  GetKey:
   195 000002FD A0[6B0C0000]                mov   al,[KbChar]                   ; If nothing
   196 00000302 3CFF                        cmp   al,0FFh                       ;  read then
   197 00000304 74F7                        je    GetKey                        ;  jump back
   198 00000306 E8ACFEFFFF                  call  HexDump                       ; Translate to hex display
   199 0000030B A0[6C0C0000]                mov   al,[Row]                      ; Bump
   200 00000310 0401                        add   al,1                          ;  Row
   201 00000312 A2[6C0C0000]                mov   [Row],al                      ;  by 1
   202 00000317 B001                        mov   al,1                          ; Reset
   203 00000319 A2[6D0C0000]                mov   [Col],al                      ;  Col to 1
   204 0000031E BB[5D0C0000]                mov   ebx,Buffer                    ; Put hex out at upper left
   205 00000323 E83BFDFFFF                  call  PutStr                        ;  corner of the screen
   206 00000328 E861FEFFFF                  call  KbXlate                       ; Translate scancode to ASCII
   207 0000032D B001                        mov   al,1                          ; Reset
   208 0000032F A2[6D0C0000]                mov   [Col],al                      ;  Col to 1
   209 00000334 A0[6C0C0000]                mov   al,[Row]                      ; Bump
   210 00000339 0401                        add   al,1                          ;  Row
   211 0000033B A2[6C0C0000]                mov   [Row],al                      ;  by 1
   212 00000340 E8C0FCFFFF                  call  CalcVideoAddr                 ; Put the keyboard
   213 00000345 8A1D[6B0C0000]              mov   bl,[KbChar]                   ;  character
   214 0000034B 881D[6A0C0000]              mov   [Char],bl                     ;  on that
   215 00000351 E8F5FCFFFF                  call  PutChar                       ;  row
   216 00000356 E86FFDFFFF                  call  MoveCursor                    ; Update cursor
   217 0000035B 8A1D[6B0C0000]              mov   bl,[KbChar]                   ; Quit
   218 00000361 80FB71                      cmp   bl,071h                       ;  when q (ASCII 071h)
   219 00000364 7409                        je    AllDone                       ;  is pressed
   220 00000366 B0FF                        mov   al,0FFh                       ; Reset KbChar
   221 00000368 A2[6B0C0000]                mov   [KbChar],al                   ;  to wait for next key
   222 0000036D EB8E                        jmp   GetKey                        ; Loop
   223                                  
   224                                  AllDone:
   225                                      ;---------------
   226                                      ; Print shutdown
   227                                      ;---------------
   228 0000036F BB[5A0C0000]                mov   ebx,NewLine                   ; Put
   229 00000374 E8EAFCFFFF                  call  PutStr                        ;  a New Line
   230 00000379 BB[5A0C0000]                mov   ebx,NewLine                   ; Put
   231 0000037E E8E0FCFFFF                  call  PutStr                        ;  a New Line
   232 00000383 BB[310C0000]                mov   ebx,Msg3                      ; Put
   233 00000388 E8D6FCFFFF                  call  PutStr                        ;  Msg3
   234                                  
   235                                      ;---------------
   236                                      ; Stop execution
   237                                      ;---------------
   238 0000038D FA                          cli                                 ; Disable interrupts
   239 0000038E F4                          hlt                                 ; Halt
   240                                  
   241                                  ;----------------------------------------------
   242                                  ; Configure PIT for 18.2 Hz (default frequency)
   243                                  ;----------------------------------------------
   244                                  SetPIT:
   245 0000038F B036                        mov   al,00110110b                  ; Set PIT to Mode 3 (Square Wave Generator)
   246 00000391 E643                        out   43h,al                        ; Write to PIT control port
   247 00000393 66B8FFFF                    mov   ax,0FFFFh                     ; Divisor for 18.2 Hz (default)
   248 00000397 E640                        out   40h,al                        ; Write low byte of divisor
   249 00000399 88E0                        mov   al,ah                         ; Write high byte of divisor
   250 0000039B E640                        out   40h,al
   251 0000039D C3                          ret
   252                                  
   253                                  ;----------
   254                                  ; ISR Timer
   255                                  ;----------
   256                                  IsrTimer:
   257 0000039E 60                          pushad
   258 0000039F FF05[8A0C0000]              inc   dword [TimerTicks]            ; Increment the tick counter
   259 000003A5 B020                        mov   al,020h                       ; Send EOI - End of Interrupt
   260 000003A7 E620                        out   PIC1_CTRL,al                  ;  to master PIC
   261 000003A9 61                          popad
   262 000003AA CF                          iretd
   263                                  
   264                                  ;-------------
   265                                  ; ISR Keyboard  
   266                                  ;-------------
   267                                  IsrKeyboard:  
   268 000003AB 60                          pushad  
   269 000003AC E460                        in al,060h                         ; Read scancode from keyboard  
   270 000003AE A2[6B0C0000]                mov [KbChar],al                    ; Store it in KbChar  
   271 000003B3 B020                        mov al,020h                        ; Send EOI to PIC  
   272 000003B5 E620                        out PIC1_CTRL,al  
   273 000003B7 61                          popad  
   274 000003B8 CF                          iretd
   275                                  
   276                                  ;----------------------------------------------------------
   277                                  ; Sleep for approximately the number of ticks in SleepTicks
   278                                  ;----------------------------------------------------------
   279                                  Sleep:
   280 000003B9 50                          push eax
   281 000003BA 51                          push ecx
   282 000003BB 8B0D[8A0C0000]              mov ecx,[TimerTicks]               ; Get current tick count
   283 000003C1 030D[8E0C0000]              add ecx,[SleepTicks]               ; Target tick count = now + SleepTicks
   284                                  SleepWait:
   285 000003C7 390D[8A0C0000]              cmp [TimerTicks],ecx              ; Has target tick been reached?
   286 000003CD 7303                        jae SleepDone                     ; If yes (TimerTicks >= ecx), exit
   287 000003CF F4                          hlt                               ; Halt until next interrupt
   288 000003D0 EBF5                        jmp SleepWait                     ; Check again
   289                                  SleepDone:
   290 000003D2 59                          pop ecx
   291 000003D3 58                          pop eax
   292 000003D4 C3                          ret
   293                                  
   294                                  ;----------------------
   295                                  ; Flush keyboard buffer
   296                                  ;----------------------
   297                                  FlushKbBuffer:
   298                                      ; Optional: Disable keyboard to prevent new data
   299 000003D5 B0AD                        mov   al,0ADh                     ; Command: Disable keyboard
   300 000003D7 E664                        out   064h,al
   301                                  FlushLoop:
   302 000003D9 E464                        in    al,064h                     ; Read status register
   303 000003DB A801                        test  al,01h                      ; Check if output buffer is full
   304 000003DD 7404                        jz    DoneFlush                   ; If not, we're done
   305 000003DF E460                        in    al,060h                     ; Read and discard scancode
   306 000003E1 EBF6                        jmp   FlushLoop
   307                                  DoneFlush:
   308                                      ; Optional: Re-enable keyboard
   309 000003E3 B0AE                        mov   al,0AEh                     ; Command: Enable keyboard
   310 000003E5 E664                        out   064h,al
   311                                  
   312                                  ;--------------------------------------------------------------------------------------------------
   313                                  ; Interrupt Descriptor Table (IDT)
   314                                  ;--------------------------------------------------------------------------------------------------
   315                                  IDT:
   316                                  IDT1:
   317 000003E7 00<rep 800h>            TIMES 2048  db 0                        ; The IDT is exactly 2048 bytes - 256 entries 8 bytes each
   318                                  ;-------------------
   319                                  ; pointer to our IDT
   320                                  ;-------------------
   321                                  IDT2:
   322 00000BE7 FF07                                      dw  IDT2-IDT1-1       ; limit (Size of IDT)
   323 00000BE9 [E7030000]                                dd  IDT1              ; base of IDT
   324                                  
   325                                  ;--------------------------------------------------------------------------------------------------
   326                                  ; Working Storage
   327                                  ;--------------------------------------------------------------------------------------------------
   328                                  %macro String 2
   329                                  %1          dw  %%EndStr-%1
   330                                              db  %2
   331                                  %%EndStr:
   332                                  %endmacro
   333                                  String  Msg1,"------   AsmOSx86 v0.0.1   -----"
   329 00000BED 2200                <1> %1 dw %%EndStr-%1
   330 00000BEF 2D2D2D2D2D2D202020- <1>  db %2
   330 00000BF8 41736D4F5378383620- <1>
   330 00000C01 76302E302E31202020- <1>
   330 00000C0A 2D2D2D2D2D          <1>
   331                              <1> %%EndStr:
   334                                  String  Msg2,"--------  32 Bit Kernel --------"
   329 00000C0F 2200                <1> %1 dw %%EndStr-%1
   330 00000C11 2D2D2D2D2D2D2D2D20- <1>  db %2
   330 00000C1A 20333220426974204B- <1>
   330 00000C23 65726E656C202D2D2D- <1>
   330 00000C2C 2D2D2D2D2D          <1>
   331                              <1> %%EndStr:
   335                                  String  Msg3,"AsmOSx86 has ended!!"
   329 00000C31 1600                <1> %1 dw %%EndStr-%1
   330 00000C33 41736D4F5378383620- <1>  db %2
   330 00000C3C 68617320656E646564- <1>
   330 00000C45 2121                <1>
   331                              <1> %%EndStr:
   336                                  String  Msg4,"ISR Timer Started"
   329 00000C47 1300                <1> %1 dw %%EndStr-%1
   330 00000C49 4953522054696D6572- <1>  db %2
   330 00000C52 2053746172746564    <1>
   331                              <1> %%EndStr:
   337                                  String  NewLine,0Ah
   329 00000C5A 0300                <1> %1 dw %%EndStr-%1
   330 00000C5C 0A                  <1>  db %2
   331                              <1> %%EndStr:
   338                                  String  Buffer,"XXXXXXXX"
   329 00000C5D 0A00                <1> %1 dw %%EndStr-%1
   330 00000C5F 5858585858585858    <1>  db %2
   331                              <1> %%EndStr:
   339                                  
   340 00000C67 00                      ColorBack   db  0                       ; Background color (00h - 0Fh)
   341 00000C68 00                      ColorFore   db  0                       ; Foreground color (00h - 0Fh)
   342 00000C69 00                      ColorAttr   db  0                       ; Combination of background and foreground color (e.g. 3Fh 3=cyan background,F=white text)
   343 00000C6A 00                      Char        db  0                       ; ASCII character
   344 00000C6B 00                      KbChar      db  0                       ; Keyboard character
   345 00000C6C 00                      Row         db  0                       ; Row (1-25)
   346 00000C6D 00                      Col         db  0                       ; Col (1-80)
   347 00000C6E 00000000                VidAdr      dd  0                       ; Video Address
   348 00000C72 303132333435363738-     HexDigits   db  "0123456789ABCDEF"
   348 00000C7B 39414243444546     
   349                                  
   350 00000C82 101191                  Scancode    db  10h, 11h, 91h
   351 00000C85 03                      ScancodeSz  db  ScancodeSz-Scancode
   352 00000C86 717757                  CharCode    db  71h, 77h, 57h
   353 00000C89 03                      CharCodeSz  db  ScancodeSz-Scancode
   354                                  
   355 00000C8A 00000000                TimerTicks  dd  0                       ; Counter for timer ticks
   356 00000C8E 00000000                SleepTicks  dd  0                       ; Number of ticks to sleep
   357                                  
   358                                  ;--------------------------------------------------------------------------------------------------
   359                                  ; Video
   360                                  ;--------------------------------------------------------------------------------------------------
   361                                  VidMem      equ 0B8000h                 ; Video Memory (Starting Address)
   362                                  TotCol      equ 80                      ; width and height of screen
   363                                  Black       equ 00h                     ; Black
   364                                  Cyan        equ 03h                     ; Cyan
   365                                  Purple      equ 05h                     ; Purple
   366                                  White       equ 0Fh                     ; White
   367                                  
   368                                  ;--------------------------------------------------------------------------------------------------
   369                                  ; PIC - 8259 Programmable Interrupt Controller
   370                                  ;--------------------------------------------------------------------------------------------------
   371                                  PIC1        equ 020h                    ; PIC - Master
   372                                  PIC2        equ 0A0h                    ; PIC - Slave
   373                                  PIC1_CTRL   equ PIC1                    ; PIC1 Command port
   374                                  PIC1_DATA   equ PIC1+1                  ; PIC1 Data port
   375                                  PIC2_CTRL   equ PIC2                    ; PIC2 Command port
   376                                  PIC2_DATA   equ PIC2+1                  ; PIC2 Data port
