     1                                  ;**********************************************************
     2                                  ; Kernel.asm
     3                                  ;   A basic 32 bit binary kernel
     4                                  ;
     5                                  ; nasm -f bin Kernel.asm -o Kernel.bin -l Kernel.lst
     6                                  ;**********************************************************
     7                                  
     8                                  [bits  32]                              ; 32 bit code
     9                                      org   100000h                       ; Kernel starts at 1 MB
    10 00000000 E92C020000                  jmp   Stage3                        ; Jump to entry point
    11                                  
    12                                  ;--------------------------------------------------------------------------------------------------
    13                                  ; Include Major Components
    14                                  ;--------------------------------------------------------------------------------------------------
    15                                  %include "Video.asm"                    ; Include video routines
     1                              <1> ;**********************************************************
     2                              <1> ; Video.asm
     3                              <1> ;   Video routines for kernel
     4                              <1> ;   Provides basic video output functions
     5                              <1> ;   such as printing characters and strings to the screen
     6                              <1> ;   and updating the hardware cursor.
     7                              <1> ;**********************************************************
     8                              <1> 
     9                              <1> ;--------------------------------------------------------------------------------------------------
    10                              <1> ; Video Routines
    11                              <1> ;--------------------------------------------------------------------------------------------------
    12                              <1> 
    13                              <1> ;---------------
    14                              <1> ;- Color Codes -
    15                              <1> ;---------------
    16                              <1> ;  0 0 Black
    17                              <1> ;  1 1 Blue
    18                              <1> ;  2 2 Green
    19                              <1> ;  3 3 Cyan
    20                              <1> ;  4 4 Red
    21                              <1> ;  5 5 Magenta
    22                              <1> ;  6 6 Brown
    23                              <1> ;  7 7 White
    24                              <1> ;  8 8 Gray
    25                              <1> ;  9 9 Light Blue
    26                              <1> ; 10 A Light Green
    27                              <1> ; 11 B Light Cyan
    28                              <1> ; 12 C Light Red
    29                              <1> ; 13 D Light Magenta
    30                              <1> ; 14 E Yellow
    31                              <1> ; 15 F Bright White
    32                              <1> ; Example 3F
    33                              <1> ;         ^^
    34                              <1> ;         ||
    35                              <1> ;         ||- Foreground F = White
    36                              <1> ;         |-- Background 3 = Cyan
    37                              <1> 
    38                              <1> ;------------------------------------------
    39                              <1> ; Routine to calculate video memory address
    40                              <1> ;   represented by the given Row,Col
    41                              <1> ;------------------------------------------
    42                              <1> CalcVideoAddr:
    43 00000005 60                  <1>     pusha                               ; Save registers
    44 00000006 A0[84050000]        <1>     mov   al,[Row]                      ; If Row is
    45 0000000B 3C19                <1>     cmp   al,25                         ;  is less than 25
    46 0000000D 7C0C                <1>     jl    CalcVideoAddr1                ;  go to CalcVideoAddr1
    47 0000000F B018                <1>     mov   al,24                         ; Set row to 24
    48 00000011 A2[84050000]        <1>     mov   [Row],al                      ;  and save it
    49 00000016 E82D010000          <1>     call ScrollUp                       ;  and scroll up the screen
    50                              <1> CalcVideoAddr1:    
    51 0000001B 31C0                <1>     xor   eax,eax                       ; Row calculation
    52 0000001D A0[84050000]        <1>     mov   al,[Row]                      ;  row
    53 00000022 48                  <1>     dec   eax                           ;  minus 1
    54 00000023 BAA0000000          <1>     mov   edx,160                       ;  times
    55 00000028 F7E2                <1>     mul   edx                           ;  160
    56 0000002A 50                  <1>     push  eax                           ;  save it
    57 0000002B 31C0                <1>     xor   eax,eax                       ; Col calculation
    58 0000002D A0[85050000]        <1>     mov   al,[Col]                      ;  col
    59 00000032 BA02000000          <1>     mov   edx,2                         ;  times
    60 00000037 F7E2                <1>     mul   edx                           ;  2
    61 00000039 83E802              <1>     sub   eax,2                         ;  minus 2
    62 0000003C 5A                  <1>     pop   edx                           ; Add col calculation
    63 0000003D 01D0                <1>     add   eax,edx                       ;  to row calculation
    64 0000003F 0500800B00          <1>     add   eax,VidMem                    ;  plus VidMem
    65 00000044 A3[86050000]        <1>     mov   [VidAdr],eax                  ; Save in VidAdr
    66 00000049 61                  <1>     popa                                ; Restore registers
    67 0000004A C3                  <1>     ret                                 ; Return to caller
    68                              <1> 
    69                              <1> ;------------------------------
    70                              <1> ; Put a character on the screen
    71                              <1> ; EDI = address in video memory
    72                              <1> ;------------------------------
    73                              <1> PutChar:
    74 0000004B 60                  <1>     pusha                               ; Save registers
    75 0000004C 8B3D[86050000]      <1>     mov   edi,[VidAdr]                  ; EDI = Video Address
    76 00000052 8A15[82050000]      <1>     mov   dl,[Char]                     ; DL = character
    77 00000058 8A35[81050000]      <1>     mov   dh,[ColorAttr]                ; DH = attribute
    78 0000005E 668917              <1>     mov   [edi],dx                      ; Move attribute and character to video display
    79 00000061 61                  <1>     popa                                ; Restore registers
    80 00000062 C3                  <1>     ret                                 ; Return to caller
    81                              <1> 
    82                              <1> ;---------------------------------
    83                              <1> ; Print a null terminated string
    84                              <1> ; EBX = address of string to print
    85                              <1> ;---------------------------------
    86                              <1> PutStr:
    87 00000063 60                  <1>     pusha                               ; Save registers
    88 00000064 E89CFFFFFF          <1>     call  CalcVideoAddr                 ; Calculate video address
    89 00000069 31C9                <1>     xor   ecx,ecx                       ; Clear ECX
    90 0000006B 53                  <1>     push  ebx                           ; Copy the string address in EBX
    91 0000006C 5E                  <1>     pop   esi                           ;  into ESI
    92 0000006D 668B0E              <1>     mov   cx,[esi]                      ; Grab string length using ESI, stuff it into CX
    93 00000070 6683E902            <1>     sub   cx,2                          ; Subtract out 2 bytes for the length field
    94 00000074 83C602              <1>     add   esi,2                         ; Bump past the length field to the beginning of string
    95                              <1> PutStr1:
    96 00000077 8A1E                <1>     mov   bl,[esi]                      ; Get next character
    97 00000079 80FB0A              <1>     cmp   bl,0Ah                        ; NewLine?
    98 0000007C 751C                <1>     jne   PutStr2                       ;  No
    99 0000007E 31C0                <1>     xor   eax,eax                       ;  Yes
   100 00000080 B001                <1>     mov   al,1                          ;   Set Col
   101 00000082 A2[85050000]        <1>     mov   [Col],al                      ;   back to
   102 00000087 A0[84050000]        <1>     mov   al,[Row]                      ;   1 and
   103 0000008C FEC0                <1>     inc   al                            ;   bump row
   104 0000008E A2[84050000]        <1>     mov   [Row],al                      ;   by 1
   105 00000093 E86DFFFFFF          <1>     call  CalcVideoAddr                 ; Calculate video address
   106 00000098 EB26                <1>     jmp   PutStr3                       ; Continue
   107                              <1> PutStr2:
   108 0000009A 881D[82050000]      <1>     mov   [Char],bl                     ; Stash our character
   109 000000A0 E8A6FFFFFF          <1>     call  PutChar                       ; Print it out
   110 000000A5 A1[86050000]        <1>     mov   eax,[VidAdr]                  ; Bump
   111 000000AA 83C002              <1>     add   eax,2                         ;  Video Address
   112 000000AD A3[86050000]        <1>     mov   [VidAdr],eax                  ;  by 2
   113 000000B2 31C0                <1>     xor   eax,eax                       ; Bump
   114 000000B4 A0[85050000]        <1>     mov   al,[Col]                      ;  Col
   115 000000B9 0401                <1>     add   al,1                          ;  by
   116 000000BB A2[85050000]        <1>     mov   [Col],al                      ;  1
   117                              <1> PutStr3:
   118 000000C0 46                  <1>     inc   esi                           ; Bump ESI to next character in our string
   119 000000C1 E2B4                <1>     loop  PutStr1                       ; Loop (Decrement CX each time until CX is zero)
   120 000000C3 E802000000          <1>     call  MoveCursor                    ; Update cursor (do this once after displaying the string, more efficient)
   121 000000C8 61                  <1>     popa                                ; Restore registers
   122 000000C9 C3                  <1>     ret                                 ; Return to caller
   123                              <1> 
   124                              <1> ;-----------------------
   125                              <1> ; Update hardware cursor
   126                              <1> ;-----------------------
   127                              <1> MoveCursor:
   128 000000CA 60                  <1>     pusha                               ; Save registers
   129 000000CB 8A3D[84050000]      <1>     mov   bh,[Row]                      ; BH = row
   130 000000D1 8A1D[85050000]      <1>     mov   bl,[Col]                      ; BL = col
   131 000000D7 FECF                <1>     dec   bh                            ; BH-- (Make row zero based)
   132                              <1> 
   133 000000D9 31C0                <1>     xor   eax,eax                       ; Clear EAX
   134 000000DB B950000000          <1>     mov   ecx,TotCol                    ; ECX = TotCol
   135 000000E0 88F8                <1>     mov   al,bh                         ; Row
   136 000000E2 F7E1                <1>     mul   ecx                           ;  * TotCol
   137 000000E4 00D8                <1>     add   al,bl                         ;  + Col
   138 000000E6 89C3                <1>     mov   ebx,eax                       ; Save result in EBX (BL,BH in particular)
   139                              <1> 
   140 000000E8 31C0                <1>     xor   eax,eax                       ; Clear EAX
   141 000000EA 66BAD403            <1>     mov   dx,03D4h                      ; Set VGA port to  03D4h (Video controller register select)
   142 000000EE B00F                <1>     mov   al,0Fh                        ; Set VGA port-index 0Fh (cursor location low byte)
   143 000000F0 EE                  <1>     out   dx,al                         ; Write to the VGA port
   144 000000F1 66BAD503            <1>     mov   dx,03D5h                      ; Set VGA port to  03D5h (Video controller data)
   145 000000F5 88D8                <1>     mov   al,bl                         ; Set low byte of calculated cursor position from above
   146 000000F7 EE                  <1>     out   dx,al                         ; Write to the VGA port
   147                              <1> 
   148 000000F8 31C0                <1>     xor   eax,eax                       ; Clear EAX
   149 000000FA 66BAD403            <1>     mov   dx,03D4h                      ; Set VGA port to  03D4h (Video controller register select)
   150 000000FE B00E                <1>     mov   al,0Eh                        ; Set VGA port-index 0Fh (cursor location high byte)
   151 00000100 EE                  <1>     out   dx,al                         ; Write to the VGA port
   152 00000101 66BAD503            <1>     mov   dx,03D5h                      ; Set VGA port to  03D5h (Video controller data)
   153 00000105 88F8                <1>     mov   al,bh                         ; Set high byte of calculated cursor position from above
   154 00000107 EE                  <1>     out   dx,al                         ; Write to the VGA port
   155                              <1> 
   156 00000108 61                  <1>     popa                                ; Restore registers
   157 00000109 C3                  <1>     ret                                 ; Return to caller
   158                              <1> 
   159                              <1> ;-------------
   160                              <1> ; Clear Screen
   161                              <1> ;-------------
   162                              <1> ClrScr:
   163 0000010A 60                  <1>     pusha                               ; Save registers
   164 0000010B FC                  <1>     cld                                 ; Clear DF Flag, REP STOSW increments EDI
   165 0000010C BF00800B00          <1>     mov   edi,VidMem                    ; Set EDI to beginning of Video Memory
   166 00000111 31C9                <1>     xor   ecx,ecx                       ; 2,000 'words'
   167 00000113 66B9D007            <1>     mov   cx,2000                       ;  on the screen
   168 00000117 8A25[81050000]      <1>     mov   ah,[ColorAttr]                ; Set color attribute
   169 0000011D B020                <1>     mov   al,' '                        ; We're going to 'blank' out the screen
   170 0000011F F366AB              <1>     rep   stosw                         ; Move AX to video memory pointed to by EDI, Repeat CX times, increment EDI each time
   171 00000122 B001                <1>     mov   al,1
   172 00000124 A2[85050000]        <1>     mov   [Col],al                      ; Set Col to 1
   173 00000129 A2[84050000]        <1>     mov   [Row],al                      ; Set Row to 1
   174 0000012E 61                  <1>     popa                                ; Restore registers
   175 0000012F C3                  <1>     ret                                 ; Return to caller
   176                              <1> 
   177                              <1> ;-------------------
   178                              <1> ; Set Color Attribute
   179                              <1> ;-------------------
   180                              <1> SetColorAttr:
   181 00000130 60                  <1>     pusha                               ; Save registers
   182 00000131 A0[7F050000]        <1>     mov   al,[ColorBack]                ; Background color (e.g. 3)
   183 00000136 C0E004              <1>     shl   al,4                          ;  goes in highest 4 bits of AL
   184 00000139 8A1D[80050000]      <1>     mov   bl,[ColorFore]                ; Foreground color in lowest 4 bits of BL (e.g. F)
   185 0000013F 09D8                <1>     or    eax,ebx                       ; AL now has the combination of background and foreground (e.g. 3F)
   186 00000141 A2[81050000]        <1>     mov   [ColorAttr],al                ; Save result in ColorAttr
   187 00000146 61                  <1>     popa                                ; Restore registers
   188 00000147 C3                  <1>     ret                                 ; Return to caller
   189                              <1> 
   190                              <1> ;-----------------
   191                              <1> ; Scroll Screen Up
   192                              <1> ;-----------------
   193                              <1> ScrollUp:
   194 00000148 60                  <1>     pusha
   195 00000149 BEA0800B00          <1>     mov   esi,VidMem + 160              ; start of row 2
   196 0000014E BF00800B00          <1>     mov   edi,VidMem                    ; start of row 1
   197 00000153 B980070000          <1>     mov   ecx,24*80                     ; 24 rows × 80 columns
   198 00000158 F366A5              <1>     rep   movsw                         ; copy each word (char+attr)
   199                              <1>     ; Clear bottom row
   200 0000015B 66B82000            <1>     mov   ax,' '                        ; space character
   201 0000015F 8A25[81050000]      <1>     mov   ah,[ColorAttr]                ; current color
   202 00000165 BF008F0B00          <1>     mov   edi,VidMem + 24*160           ; start of row 25
   203 0000016A B950000000          <1>     mov   ecx,80
   204                              <1> ScrollClr:
   205 0000016F 66AB                <1>     stosw
   206 00000171 E2FC                <1>     loop  ScrollClr
   207 00000173 61                  <1>     popa
   208 00000174 C3                  <1>     ret
    16                                  
    17                                  ;--------------------------------------------------------------------------------------------------
    18                                  ; Install our IDT
    19                                  ;--------------------------------------------------------------------------------------------------
    20                                  InstallIDT:
    21 00000175 FA                          cli                                 ; Disable interrupts
    22 00000176 60                          pusha                               ; Save registers
    23 00000177 0F011D[00080000]            lidt  [IDT2]                        ; Load IDT into IDTR
    24 0000017E BF[00000000]                mov   edi,IDT1                      ; Set EDI to beginning of IDT
    25 00000183 66B90008                    mov   cx,2048                       ; 2048 bytes in IDT
    26 00000187 31C0                        xor   eax,eax                       ; Set all 256 IDT entries to NULL (0h)
    27 00000189 F3AA                        rep   stosb                         ; Move AL to IDT pointed to by EDI, Repeat CX times, increment EDI each time
    28                                  
    29 0000018B 66B80000                    mov ax,0
    30                                  .loop:
    31 0000018F BA[1E040000]                mov edx,FaultHandler
    32 00000194 E85F020000                  call SetIDTGate
    33 00000199 6640                        inc ax
    34 0000019B 6683F820                    cmp ax,32
    35 0000019F 7CEE                        jl .loop
    36                                      
    37 000001A1 66B80800                    mov   ax,0x08
    38 000001A5 BA[1E040000]                mov   edx,FaultHandler
    39 000001AA E849020000                  call  SetIDTGate
    40                                  
    41 000001AF 66B80D00                    mov   ax,0x0D
    42 000001B3 BA[1E040000]                mov   edx,FaultHandler
    43 000001B8 E83B020000                  call  SetIDTGate
    44                                  
    45                                      ; Inspect type byte of IDT[0x0D]
    46 000001BD BF[00000000]                mov edi, IDT1
    47 000001C2 83C768                      add edi, 0x0D * 8      ; Each gate is 8 bytes
    48 000001C5 8A4705                      mov al, [edi+5]        ; Byte 5 = type field
    49 000001C8 E88C020000                  call PrintByteHex      ; Should print 8E if correct
    50                                  
    51 000001CD FB                          sti                                 ; Enable interrupts
    52 000001CE 61                          popa                                ; Restore registers
    53 000001CF C3                          ret                                 ; All done!
    54                                  
    55                                  ;--------------------------------------------------------------------------------------------------
    56                                  ; Keyboard Routines
    57                                  ;--------------------------------------------------------------------------------------------------
    58                                  ;-------------------
    59                                  ; Translate scancode
    60                                  ;-------------------
    61                                  KbXlate:
    62 000001D0 31C0                        xor   eax,eax
    63 000001D2 31F6                        xor   esi,esi
    64 000001D4 B9[9C050000]                mov   ecx,ScancodeSz
    65 000001D9 A0[83050000]                mov   al,[KbChar]                   ; Put scancode in AL
    66                                  KbXlateLoop1:
    67 000001DE 3A86[9A050000]              cmp   al,[Scancode+ESI]             ; Compare to Scancode
    68 000001E4 7407                        je    KbXlateFound                  ; Match!
    69 000001E6 46                          inc   esi                           ; Bump ESI
    70 000001E7 E2F5                        loop  KbXlateLoop1                  ; Check next
    71 000001E9 B03F                        mov   al,'?'                        ; Not found defaults to ? for now
    72 000001EB EB06                        jmp   KbXlateDone                   ; Jump to done
    73                                  KbXlateFound:
    74 000001ED 8A86[9D050000]              mov   al,[CharCode+ESI]             ; Put ASCII character matching the Scancode in AL
    75                                  KbXlateDone:
    76 000001F3 A2[83050000]                mov   [KbChar],al                   ; Put translated char in KbChar
    77 000001F8 C3                          ret                                 ; All done!
    78                                  
    79                                  ;---------
    80                                  ; Hex Dump
    81                                  ;---------
    82                                  HexDump:
    83 000001F9 60                          pusha                               ; Save registers
    84 000001FA B908000000                  mov   ecx,8                         ; Move
    85 000001FF BE[77050000]                mov   esi,Buffer+2                  ;  8
    86 00000204 B020                        mov   al,020h                       ;  spaces
    87                                  HexDump1:                               ;  to
    88 00000206 8806                        mov   [esi],al                      ;  clear
    89 00000208 46                          inc   esi                           ;  out
    90 00000209 E2FB                        loop  HexDump1                      ;  Buffer
    91 0000020B B908000000                  mov   ecx,8                         ; Setup
    92 00000210 31D2                        xor   edx,edx                       ;  for translating
    93 00000212 8A15[83050000]              mov   dl,[KbChar]                   ;  the keyboard
    94 00000218 BB[8A050000]                mov   ebx,HexDigits                 ;  scancode
    95 0000021D BE[7E050000]                mov   esi,Buffer+9                  ;  to hex display
    96                                  HexDump2:
    97 00000222 88D0                        mov   al,dl                         ; Translate
    98 00000224 240F                        and   al,15                         ;  each
    99 00000226 D7                          xlat                                ;  hex
   100 00000227 8806                        mov   [esi],al                      ;  digit
   101 00000229 4E                          dec   esi                           ;  and put
   102 0000022A C1EA04                      shr   edx,4                         ;  it in
   103 0000022D E2F3                        loop  HexDump2                      ;  Buffer
   104 0000022F 61                          popa                                ; Restore registers
   105 00000230 C3                          ret                                 ; Return to caller
   106                                  
   107                                  ;--------------------------------------------------------------------------------------------------
   108                                  ; Stage3 - Our Kernel code starts executing here!
   109                                  ;--------------------------------------------------------------------------------------------------
   110                                  Stage3:
   111                                      ;--------------
   112                                      ; Set registers
   113                                      ;--------------
   114 00000231 66B81000                    mov   ax,10h                        ; Set data
   115 00000235 8ED8                        mov   ds,ax                         ;  segments to
   116 00000237 8ED0                        mov   ss,ax                         ;  data selector
   117 00000239 8EC0                        mov   es,ax                         ;  (10h)
   118 0000023B BC00000900                  mov   esp,90000h                    ; Stack begins from 90000h
   119                                     
   120 00000240 E830FFFFFF                  call  InstallIDT                    ; Install our Interrupt Descriptor Table
   121                                     
   122 00000245 BF00800B00                  mov edi, 0B8000h
   123 0000024A C60758                      mov byte [edi], 'X'
   124 0000024D C6470107                    mov byte [edi+1], 0x07
   125                                  
   126 00000251 FA                          cli                                 ; Disable interrupts
   127 00000252 F4                          hlt                                 ; Halt
   128                                  
   129                                      ;-------------
   130                                      ; Clear screen
   131                                      ;-------------
   132 00000253 B000                        mov   al,Black                      ; Background
   133 00000255 A2[7F050000]                mov   [ColorBack],al                ;  color
   134 0000025A B005                        mov   al,Purple                     ; Foreground
   135 0000025C A2[80050000]                mov   [ColorFore],al                ;  color
   136 00000261 E8CAFEFFFF                  call  SetColorAttr                  ; Set color
   137 00000266 E89FFEFFFF                  call  ClrScr                        ; Clear screen
   138                                  
   139                                      ;--------------
   140                                      ; Print success
   141                                      ;--------------
   142 0000026B B00A                        mov   al,10                         ; Set
   143 0000026D A2[84050000]                mov   [Row],al                      ;  Row,Col
   144 00000272 B001                        mov   al,1                          ;  to
   145 00000274 A2[85050000]                mov   [Col],al                      ;  10,1
   146 00000279 BB[9A040000]                mov   ebx,Msg1                      ; Put
   147 0000027E E8E0FDFFFF                  call  PutStr                        ;  Msg1
   148 00000283 BB[72050000]                mov   ebx,NewLine                   ; Put
   149 00000288 E8D6FDFFFF                  call  PutStr                        ;  a New Line
   150 0000028D BB[BC040000]                mov   ebx,Msg2                      ; Put
   151 00000292 E8CCFDFFFF                  call  PutStr                        ;  Msg2
   152                                  
   153                                      ;------------------------
   154                                      ; Initialize the 8259 PIC
   155                                      ;------------------------
   156 00000297 B011                        mov   al,00010001b                  ; Set ICW1
   157 00000299 E620                        out   PIC1_CTRL,al                  ;  Intialize
   158 0000029B E6A0                        out   PIC2_CTRL,al                  ;  8259
   159 0000029D B020                        mov   al,020h                       ; Set ICW2
   160 0000029F E621                        out   PIC1_DATA,al                  ;  Map
   161 000002A1 B028                        mov   al,028h                       ;  IRQs
   162 000002A3 E6A1                        out   PIC2_DATA,al                  ;  32-47
   163 000002A5 B004                        mov   al,00000100b                  ; Set ICW3
   164 000002A7 E621                        out   PIC1_DATA,al                  ;  Connect PIC1
   165 000002A9 B002                        mov   al,00000010b                  ;  and PIC2
   166 000002AB E6A1                        out   PIC2_DATA,al                  ;  via IRQ line 2
   167 000002AD B001                        mov   al,00000001b                  ; Set ICW4
   168 000002AF E621                        out   PIC1_DATA,al                  ;  We are in
   169 000002B1 E6A1                        out   PIC2_DATA,al                  ;  80x86 mode
   170 000002B3 E816010000                  call  SetPIT                        ; Configure the PIT for timer interrupts
   171                                  
   172                                      ;--------------
   173                                      ; Set Timer IDT
   174                                      ;--------------
   175 000002B8 BA20000000                  mov   edx,020h                      ; Timer IRQ 0 is now IRQ 32 (020h)
   176 000002BD C1E203                      shl   edx,3                         ; Position into
   177 000002C0 81C2[00000000]              add   edx,IDT                       ;  the IDT
   178 000002C6 66B8008E                    mov   ax,08E00h                     ; Stash
   179 000002CA 66894204                    mov   [EDX+4],ax                    ;  stuff
   180 000002CE B8[DD030000]                mov   eax,IsrTimer                  ;  into
   181 000002D3 668902                      mov   [edx],ax                      ;  the IDT
   182 000002D6 C1E810                      shr   eax,16                        ;  to link IRQ 32
   183 000002D9 66894206                    mov   [EDX+6],ax                    ;  to the
   184 000002DD 66B80800                    mov   ax,008h                       ;  correct ISR
   185 000002E1 66894202                    mov   [EDX+2],ax                    ;  which is IsrTimer
   186                                      
   187                                      ;-----------------
   188                                      ; Set Keyboard IDT  
   189                                      ;-----------------
   190 000002E5 BA21000000                  mov edx,021h                       ; IRQ1 maps to vector 0x21  
   191 000002EA C1E203                      shl edx,3                          ; Multiply by 8 (IDT entry size)
   192 000002ED 81C2[00000000]              add edx,IDT                        ; Point to correct IDT slot
   193 000002F3 66B8008E                    mov ax,08E00h                      ; Present, DPL=0, 32-bit interrupt gate
   194 000002F7 66894204                    mov [EDX+4],ax                     ; Set access rights
   195 000002FB B8[EA030000]                mov eax,IsrKeyboard                ; Address of ISR
   196 00000300 8902                        mov [edx],eax                      ; Low 16 bits of offset  
   197 00000302 C1E810                      shr eax,16                         ; High 16 bits of offset  
   198 00000305 894206                      mov [EDX+6],eax                    ; Set high offset  
   199 00000308 66B80800                    mov ax,008h                        ; Code segment selector  
   200 0000030C 66894202                    mov [EDX+2],ax                     ; Set segment selector
   201                                  
   202                                      ;--------------------
   203                                      ; ISR - Timer started
   204                                      ;--------------------
   205 00000310 BB[72050000]                mov   ebx,NewLine                   ; Put
   206 00000315 E849FDFFFF                  call  PutStr                        ;  a New Line
   207 0000031A BB[F4040000]                mov   ebx,Msg4                      ; Put
   208 0000031F E83FFDFFFF                  call  PutStr                        ;  Msg4
   209 00000324 C705[A4050000]6400-         mov   dword [SleepTicks],100        ; 3 seconds ≈ 100 ticks
   209 0000032C 0000               
   210                                      ;call  Sleep                         ; Sleep for 3 seconds
   211                                      ;call  ClrScr                        ; Clear screen
   212                                  
   213                                      ;-------------------
   214                                      ; Get Keyboard input
   215                                      ;-------------------
   216 0000032E B000                        mov   al,0                          ; Set starting
   217 00000330 A2[84050000]                mov   [Row],al                      ;  Row
   218 00000335 B001                        mov   al,1                          ;  and Col
   219 00000337 A2[85050000]                mov   [Col],al                      ;  for hex output
   220                                  GetKey:
   221 0000033C A0[83050000]                mov   al,[KbChar]                   ; If nothing
   222 00000341 3CFF                        cmp   al,0FFh                       ;  read then
   223 00000343 74F7                        je    GetKey                        ;  jump back
   224 00000345 E8AFFEFFFF                  call  HexDump                       ; Translate to hex display
   225 0000034A A0[84050000]                mov   al,[Row]                      ; Bump
   226 0000034F 0401                        add   al,1                          ;  Row
   227 00000351 A2[84050000]                mov   [Row],al                      ;  by 1
   228 00000356 B001                        mov   al,1                          ; Reset
   229 00000358 A2[85050000]                mov   [Col],al                      ;  Col to 1
   230 0000035D BB[75050000]                mov   ebx,Buffer                    ; Put hex out at upper left
   231 00000362 E8FCFCFFFF                  call  PutStr                        ;  corner of the screen
   232 00000367 E864FEFFFF                  call  KbXlate                       ; Translate scancode to ASCII
   233 0000036C B001                        mov   al,1                          ; Reset
   234 0000036E A2[85050000]                mov   [Col],al                      ;  Col to 1
   235 00000373 A0[84050000]                mov   al,[Row]                      ; Bump
   236 00000378 0401                        add   al,1                          ;  Row
   237 0000037A A2[84050000]                mov   [Row],al                      ;  by 1
   238 0000037F E881FCFFFF                  call  CalcVideoAddr                 ; Put the keyboard
   239 00000384 8A1D[83050000]              mov   bl,[KbChar]                   ;  character
   240 0000038A 881D[82050000]              mov   [Char],bl                     ;  on that
   241 00000390 E8B6FCFFFF                  call  PutChar                       ;  row
   242 00000395 E830FDFFFF                  call  MoveCursor                    ; Update cursor
   243 0000039A 8A1D[83050000]              mov   bl,[KbChar]                   ; Quit
   244 000003A0 80FB71                      cmp   bl,071h                       ;  when q (ASCII 071h)
   245 000003A3 7409                        je    AllDone                       ;  is pressed
   246 000003A5 B0FF                        mov   al,0FFh                       ; Reset KbChar
   247 000003A7 A2[83050000]                mov   [KbChar],al                   ;  to wait for next key
   248 000003AC EB8E                        jmp   GetKey                        ; Loop
   249                                  
   250                                  AllDone:
   251                                      ;---------------
   252                                      ; Print shutdown
   253                                      ;---------------
   254 000003AE BB[72050000]                mov   ebx,NewLine                   ; Put
   255 000003B3 E8ABFCFFFF                  call  PutStr                        ;  a New Line
   256 000003B8 BB[72050000]                mov   ebx,NewLine                   ; Put
   257 000003BD E8A1FCFFFF                  call  PutStr                        ;  a New Line
   258 000003C2 BB[DE040000]                mov   ebx,Msg3                      ; Put
   259 000003C7 E897FCFFFF                  call  PutStr                        ;  Msg3
   260                                  
   261                                      ;---------------
   262                                      ; Stop execution
   263                                      ;---------------
   264 000003CC FA                          cli                                 ; Disable interrupts
   265 000003CD F4                          hlt                                 ; Halt
   266                                  
   267                                  ;----------------------------------------------
   268                                  ; Configure PIT for 18.2 Hz (default frequency)
   269                                  ;----------------------------------------------
   270                                  SetPIT:
   271 000003CE B036                        mov   al,00110110b                  ; Set PIT to Mode 3 (Square Wave Generator)
   272 000003D0 E643                        out   43h,al                        ; Write to PIT control port
   273 000003D2 66B8FFFF                    mov   ax,0FFFFh                     ; Divisor for 18.2 Hz (default)
   274 000003D6 E640                        out   40h,al                        ; Write low byte of divisor
   275 000003D8 88E0                        mov   al,ah                         ; Write high byte of divisor
   276 000003DA E640                        out   40h,al
   277 000003DC C3                          ret
   278                                  
   279                                  ;----------
   280                                  ; ISR Timer
   281                                  ;----------
   282                                  IsrTimer:
   283 000003DD 60                          pushad
   284 000003DE FF05[A0050000]              inc   dword [TimerTicks]            ; Increment the tick counter
   285 000003E4 B020                        mov   al,020h                       ; Send EOI - End of Interrupt
   286 000003E6 E620                        out   PIC1_CTRL,al                  ;  to master PIC
   287 000003E8 61                          popad
   288 000003E9 CF                          iretd
   289                                  
   290                                  ;-------------
   291                                  ; ISR Keyboard  
   292                                  ;-------------
   293                                  IsrKeyboard:  
   294 000003EA 60                          pushad  
   295 000003EB E460                        in al,060h                         ; Read scancode from keyboard  
   296 000003ED A2[83050000]                mov [KbChar],al                    ; Store it in KbChar  
   297 000003F2 B020                        mov al,020h                        ; Send EOI to PIC  
   298 000003F4 E620                        out PIC1_CTRL,al  
   299 000003F6 61                          popad  
   300 000003F7 CF                          iretd
   301                                  
   302                                  SetIDTGate:
   303                                      ; ax = vector number
   304                                      ; edx = handler address
   305 000003F8 BF[00000000]                mov edi, IDT1
   306 000003FD 0FB7D8                      movzx ebx, ax
   307 00000400 C1E303                      shl ebx, 3
   308 00000403 01DF                        add edi, ebx
   309                                      ; Offset low
   310 00000405 668917                      mov word [edi], dx
   311                                      ; Selector
   312 00000408 66C747020800                mov word [edi+2], 0x08
   313                                      ; Zero byte
   314 0000040E C6470400                    mov byte [edi+4], 0
   315                                      ; Type: 0x8E = 32-bit interrupt gate, ring 0, present
   316 00000412 C647058E                    mov byte [edi+5], 0x8E
   317                                      ; Offset high
   318 00000416 C1EA10                      shr edx, 16
   319 00000419 66895706                    mov word [edi+6], dx
   320 0000041D C3                          ret
   321                                  
   322                                  FaultHandler:
   323 0000041E FA                          cli
   324 0000041F BB[4A050000]                mov ebx,FaultMsg
   325 00000424 E83AFCFFFF                  call PutStr
   326 00000429 EBFE                        jmp $
   327                                  
   328                                  ;----------------------------------------------------------
   329                                  ; Sleep for approximately the number of ticks in SleepTicks
   330                                  ;----------------------------------------------------------
   331                                  Sleep:
   332 0000042B 50                          push eax
   333 0000042C 51                          push ecx
   334 0000042D 8B0D[A0050000]              mov ecx,[TimerTicks]               ; Get current tick count
   335 00000433 030D[A4050000]              add ecx,[SleepTicks]               ; Target tick count = now + SleepTicks
   336                                  SleepWait:
   337 00000439 390D[A0050000]              cmp [TimerTicks],ecx              ; Has target tick been reached?
   338 0000043F 7303                        jae SleepDone                     ; If yes (TimerTicks >= ecx), exit
   339 00000441 F4                          hlt                               ; Halt until next interrupt
   340 00000442 EBF5                        jmp SleepWait                     ; Check again
   341                                  SleepDone:
   342 00000444 59                          pop ecx
   343 00000445 58                          pop eax
   344 00000446 C3                          ret
   345                                  
   346                                  ;----------------------
   347                                  ; Flush keyboard buffer
   348                                  ;----------------------
   349                                  FlushKbBuffer:
   350                                      ; Optional: Disable keyboard to prevent new data
   351 00000447 B0AD                        mov   al,0ADh                     ; Command: Disable keyboard
   352 00000449 E664                        out   064h,al
   353 0000044B B908000000                  mov   ecx,8
   354                                  FlushLoop:
   355 00000450 E460                        in    al,060h                     ; Read and discard scancode
   356 00000452 E2FC                        loop  FlushLoop
   357                                  DoneFlush:
   358                                      ; Optional: Re-enable keyboard
   359 00000454 B0AE                        mov   al,0AEh                     ; Command: Enable keyboard
   360 00000456 E664                        out   064h,al
   361 00000458 C3                          ret
   362                                  
   363                                  ;--------------------------------------------------
   364                                  ; PrintByteHexPM: prints byte in AL as two hex digits
   365                                  ;--------------------------------------------------
   366                                  PrintByteHex:
   367 00000459 6650                        push ax
   368 0000045B 88C4                        mov ah, al
   369 0000045D C0EC04                      shr ah, 4
   370 00000460 E80A000000                  call PrintNibble
   371                                  
   372 00000465 6658                        pop ax
   373 00000467 240F                        and al, 0Fh
   374 00000469 E801000000                  call PrintNibble
   375 0000046E C3                          ret
   376                                  
   377                                  ;--------------------------------------------------
   378                                  ; PrintNibblePM: prints hex digit in AL (0–F)
   379                                  ;--------------------------------------------------
   380                                  PrintNibble:
   381 0000046F 240F                        and al, 0Fh
   382 00000471 3C09                        cmp al, 9
   383 00000473 7602                        jbe .digit
   384 00000475 0407                        add al, 7          ; Convert 10–15 to 'A'–'F'
   385                                  .digit:
   386 00000477 0430                        add al, '0'
   387                                  
   388                                      ; Write to video memory at 0xB8000
   389 00000479 8B1D[98040000]              mov ebx, [CursorPos]     ; Get current cursor offset
   390 0000047F BF00800B00                  mov edi, 0xB8000
   391 00000484 01DF                        add edi, ebx
   392                                  
   393 00000486 8807                        mov [edi], al            ; Character byte
   394 00000488 C6470107                    mov byte [edi+1], 0x07   ; Attribute: light gray on black
   395                                  
   396 0000048C 6683C302                    add bx, 2               ; Advance cursor
   397 00000490 66891D[98040000]            mov [CursorPos], bx
   398 00000497 C3                          ret
   399                                  
   400                                  ;--------------------------------------------------
   401                                  ; CursorPos: tracks current screen position
   402                                  ;--------------------------------------------------
   403 00000498 0000                    CursorPos: dw 0
   404                                  
   405                                  ;--------------------------------------------------------------------------------------------------
   406                                  ; Working Storage
   407                                  ;--------------------------------------------------------------------------------------------------
   408                                  %macro String 2
   409                                  %1          dw  %%EndStr-%1
   410                                              db  %2
   411                                  %%EndStr:
   412                                  %endmacro
   413                                  String  Msg1,"------   AsmOSx86 v0.0.1   -----"
   409 0000049A 2200                <1> %1 dw %%EndStr-%1
   410 0000049C 2D2D2D2D2D2D202020- <1>  db %2
   410 000004A5 41736D4F5378383620- <1>
   410 000004AE 76302E302E31202020- <1>
   410 000004B7 2D2D2D2D2D          <1>
   411                              <1> %%EndStr:
   414                                  String  Msg2,"--------  32 Bit Kernel --------"
   409 000004BC 2200                <1> %1 dw %%EndStr-%1
   410 000004BE 2D2D2D2D2D2D2D2D20- <1>  db %2
   410 000004C7 20333220426974204B- <1>
   410 000004D0 65726E656C202D2D2D- <1>
   410 000004D9 2D2D2D2D2D          <1>
   411                              <1> %%EndStr:
   415                                  String  Msg3,"AsmOSx86 has ended!!"
   409 000004DE 1600                <1> %1 dw %%EndStr-%1
   410 000004E0 41736D4F5378383620- <1>  db %2
   410 000004E9 68617320656E646564- <1>
   410 000004F2 2121                <1>
   411                              <1> %%EndStr:
   416                                  String  Msg4,"ISR Timer Started"
   409 000004F4 1300                <1> %1 dw %%EndStr-%1
   410 000004F6 4953522054696D6572- <1>  db %2
   410 000004FF 2053746172746564    <1>
   411                              <1> %%EndStr:
   417                                  String  Msg5,"Start clearing keyboard buffer"
   409 00000507 2000                <1> %1 dw %%EndStr-%1
   410 00000509 537461727420636C65- <1>  db %2
   410 00000512 6172696E67206B6579- <1>
   410 0000051B 626F61726420627566- <1>
   410 00000524 666572              <1>
   411                              <1> %%EndStr:
   418                                  String  Msg6,"Finished clearing keyboard buffer"
   409 00000527 2300                <1> %1 dw %%EndStr-%1
   410 00000529 46696E697368656420- <1>  db %2
   410 00000532 636C656172696E6720- <1>
   410 0000053B 6B6579626F61726420- <1>
   410 00000544 627566666572        <1>
   411                              <1> %%EndStr:
   419                                  String FaultMsg,"------   FAULT: System Halted   ------"
   409 0000054A 2800                <1> %1 dw %%EndStr-%1
   410 0000054C 2D2D2D2D2D2D202020- <1>  db %2
   410 00000555 4641554C543A205379- <1>
   410 0000055E 7374656D2048616C74- <1>
   410 00000567 65642020202D2D2D2D- <1>
   410 00000570 2D2D                <1>
   411                              <1> %%EndStr:
   420                                  String  NewLine,0Ah
   409 00000572 0300                <1> %1 dw %%EndStr-%1
   410 00000574 0A                  <1>  db %2
   411                              <1> %%EndStr:
   421                                  String  Buffer,"XXXXXXXX"
   409 00000575 0A00                <1> %1 dw %%EndStr-%1
   410 00000577 5858585858585858    <1>  db %2
   411                              <1> %%EndStr:
   422                                  
   423 0000057F 00                      ColorBack   db  0                       ; Background color (00h - 0Fh)
   424 00000580 00                      ColorFore   db  0                       ; Foreground color (00h - 0Fh)
   425 00000581 00                      ColorAttr   db  0                       ; Combination of background and foreground color (e.g. 3Fh 3=cyan background,F=white text)
   426 00000582 00                      Char        db  0                       ; ASCII character
   427 00000583 00                      KbChar      db  0                       ; Keyboard character
   428 00000584 00                      Row         db  0                       ; Row (1-25)
   429 00000585 00                      Col         db  0                       ; Col (1-80)
   430 00000586 00000000                VidAdr      dd  0                       ; Video Address
   431 0000058A 303132333435363738-     HexDigits   db  "0123456789ABCDEF"
   431 00000593 39414243444546     
   432                                  
   433 0000059A 1011                    Scancode    db  10h, 11h
   434 0000059C 02                      ScancodeSz  db  ScancodeSz-Scancode
   435 0000059D 7177                    CharCode    db  71h, 77h
   436 0000059F 02                      CharCodeSz  db  ScancodeSz-Scancode
   437                                  
   438 000005A0 00000000                TimerTicks  dd  0                       ; Counter for timer ticks
   439 000005A4 00000000                SleepTicks  dd  0                       ; Number of ticks to sleep
   440                                  
   441                                  ;--------------------------------------------------------------------------------------------------
   442                                  ; Video
   443                                  ;--------------------------------------------------------------------------------------------------
   444                                  VidMem      equ 0B8000h                 ; Video Memory (Starting Address)
   445                                  TotCol      equ 80                      ; width and height of screen
   446                                  Black       equ 00h                     ; Black
   447                                  Cyan        equ 03h                     ; Cyan
   448                                  Purple      equ 05h                     ; Purple
   449                                  White       equ 0Fh                     ; White
   450                                  
   451                                  ;--------------------------------------------------------------------------------------------------
   452                                  ; PIC - 8259 Programmable Interrupt Controller
   453                                  ;--------------------------------------------------------------------------------------------------
   454                                  PIC1        equ 020h                    ; PIC - Master
   455                                  PIC2        equ 0A0h                    ; PIC - Slave
   456                                  PIC1_CTRL   equ PIC1                    ; PIC1 Command port
   457                                  PIC1_DATA   equ PIC1+1                  ; PIC1 Data port
   458                                  PIC2_CTRL   equ PIC2                    ; PIC2 Command port
   459                                  PIC2_DATA   equ PIC2+1                  ; PIC2 Data port
   460                                  
   461                                  ;--------------------------------------------------------------------------------------------------
   462                                  ; Interrupt Descriptor Table (IDT)
   463                                  ;--------------------------------------------------------------------------------------------------
   464                                  segment .data
   465                                  align 4
   466                                  IDT:
   467 00000000 00<rep 800h>            IDT1: times 2048 db 0
   468                                  IDT2:
   469 00000800 FF07                        dw 2047
   470 00000802 [00000000]                  dd IDT1
