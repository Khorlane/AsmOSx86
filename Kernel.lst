     1                                  ;**********************************************************
     2                                  ; Kernel.asm
     3                                  ;   A basic 32 bit binary kernel
     4                                  ;
     5                                  ; nasm -f bin Kernel.asm -o Kernel.bin -l Kernel.lst
     6                                  ;**********************************************************
     7                                  
     8                                  [bits  32]                              ; 32 bit code
     9                                    org   100000h                         ; Kernel starts at 1 MB
    10 00000000 E970010000                jmp   Stage3                          ; Jump to entry point
    11                                  
    12                                  ;--------------------------------------------------------------------------------------------------
    13                                  ; Include Major Components
    14                                  ;--------------------------------------------------------------------------------------------------
    15                                  %include "Video.asm"                    ; Include video routines
     1                              <1> ;**********************************************************
     2                              <1> ; Video.asm
     3                              <1> ;   Video routines for kernel
     4                              <1> ;   Provides basic video output functions
     5                              <1> ;   such as printing characters and strings to the screen
     6                              <1> ;   and updating the hardware cursor.
     7                              <1> ;**********************************************************
     8                              <1> 
     9                              <1> ;--------------------------------------------------------------------------------------------------
    10                              <1> ; Video Routines
    11                              <1> ;--------------------------------------------------------------------------------------------------
    12                              <1> 
    13                              <1> ;---------------
    14                              <1> ;- Color Codes -
    15                              <1> ;---------------
    16                              <1> ;  0 0 Black
    17                              <1> ;  1 1 Blue
    18                              <1> ;  2 2 Green
    19                              <1> ;  3 3 Cyan
    20                              <1> ;  4 4 Red
    21                              <1> ;  5 5 Magenta
    22                              <1> ;  6 6 Brown
    23                              <1> ;  7 7 White
    24                              <1> ;  8 8 Gray
    25                              <1> ;  9 9 Light Blue
    26                              <1> ; 10 A Light Green
    27                              <1> ; 11 B Light Cyan
    28                              <1> ; 12 C Light Red
    29                              <1> ; 13 D Light Magenta
    30                              <1> ; 14 E Yellow
    31                              <1> ; 15 F Bright White
    32                              <1> ; Example 3F
    33                              <1> ;         ^^
    34                              <1> ;         ||
    35                              <1> ;         ||- Foreground F = White
    36                              <1> ;         |-- Background 3 = Cyan
    37                              <1> 
    38                              <1> ;------------------------------------------
    39                              <1> ; Routine to calculate video memory address
    40                              <1> ;   represented by the given Row,Col
    41                              <1> ;------------------------------------------
    42                              <1> CalcVideoAddr:
    43 00000005 60                  <1>     pusha                               ; Save registers
    44 00000006 A0[F6030000]        <1>     mov   al,[Row]                      ; If Row is
    45 0000000B 3C19                <1>     cmp   al,25                         ;  is less than 25
    46 0000000D 7C0C                <1>     jl    CalcVideoAddr1                ;  go to CalcVideoAddr1
    47 0000000F B018                <1>     mov   al,24                         ; Set row to 24
    48 00000011 A2[F6030000]        <1>     mov   [Row],al                      ;  and save it
    49 00000016 E82D010000          <1>     call ScrollUp                       ;  and scroll up the screen
    50                              <1> CalcVideoAddr1:    
    51 0000001B 31C0                <1>     xor   eax,eax                       ; Row calculation
    52 0000001D A0[F6030000]        <1>     mov   al,[Row]                      ;  row
    53 00000022 48                  <1>     dec   eax                           ;  minus 1
    54 00000023 BAA0000000          <1>     mov   edx,160                       ;  times
    55 00000028 F7E2                <1>     mul   edx                           ;  160
    56 0000002A 50                  <1>     push  eax                           ;  save it
    57 0000002B 31C0                <1>     xor   eax,eax                       ; Col calculation
    58 0000002D A0[F7030000]        <1>     mov   al,[Col]                      ;  col
    59 00000032 BA02000000          <1>     mov   edx,2                         ;  times
    60 00000037 F7E2                <1>     mul   edx                           ;  2
    61 00000039 83E802              <1>     sub   eax,2                         ;  minus 2
    62 0000003C 5A                  <1>     pop   edx                           ; Add col calculation
    63 0000003D 01D0                <1>     add   eax,edx                       ;  to row calculation
    64 0000003F 0500800B00          <1>     add   eax,VidMem                    ;  plus VidMem
    65 00000044 A3[F8030000]        <1>     mov   [VidAdr],eax                  ; Save in VidAdr
    66 00000049 61                  <1>     popa                                ; Restore registers
    67 0000004A C3                  <1>     ret                                 ; Return to caller
    68                              <1> 
    69                              <1> ;------------------------------
    70                              <1> ; Put a character on the screen
    71                              <1> ; EDI = address in video memory
    72                              <1> ;------------------------------
    73                              <1> PutChar:
    74 0000004B 60                  <1>     pusha                               ; Save registers
    75 0000004C 8B3D[F8030000]      <1>     mov   edi,[VidAdr]                  ; EDI = Video Address
    76 00000052 8A15[F4030000]      <1>     mov   dl,[Char]                     ; DL = character
    77 00000058 8A35[F3030000]      <1>     mov   dh,[ColorAttr]                ; DH = attribute
    78 0000005E 668917              <1>     mov   [edi],dx                      ; Move attribute and character to video display
    79 00000061 61                  <1>     popa                                ; Restore registers
    80 00000062 C3                  <1>     ret                                 ; Return to caller
    81                              <1> 
    82                              <1> ;---------------------------------
    83                              <1> ; Print a null terminated string
    84                              <1> ; EBX = address of string to print
    85                              <1> ;---------------------------------
    86                              <1> PutStr:
    87 00000063 60                  <1>     pusha                               ; Save registers
    88 00000064 E89CFFFFFF          <1>     call  CalcVideoAddr                 ; Calculate video address
    89 00000069 31C9                <1>     xor   ecx,ecx                       ; Clear ECX
    90 0000006B 53                  <1>     push  ebx                           ; Copy the string address in EBX
    91 0000006C 5E                  <1>     pop   esi                           ;  into ESI
    92 0000006D 668B0E              <1>     mov   cx,[esi]                      ; Grab string length using ESI, stuff it into CX
    93 00000070 6683E902            <1>     sub   cx,2                          ; Subtract out 2 bytes for the length field
    94 00000074 83C602              <1>     add   esi,2                         ; Bump past the length field to the beginning of string
    95                              <1> PutStr1:
    96 00000077 8A1E                <1>     mov   bl,[esi]                      ; Get next character
    97 00000079 80FB0A              <1>     cmp   bl,0Ah                        ; NewLine?
    98 0000007C 751C                <1>     jne   PutStr2                       ;  No
    99 0000007E 31C0                <1>     xor   eax,eax                       ;  Yes
   100 00000080 B001                <1>     mov   al,1                          ;   Set Col
   101 00000082 A2[F7030000]        <1>     mov   [Col],al                      ;   back to
   102 00000087 A0[F6030000]        <1>     mov   al,[Row]                      ;   1 and
   103 0000008C FEC0                <1>     inc   al                            ;   bump row
   104 0000008E A2[F6030000]        <1>     mov   [Row],al                      ;   by 1
   105 00000093 E86DFFFFFF          <1>     call  CalcVideoAddr                 ; Calculate video address
   106 00000098 EB26                <1>     jmp   PutStr3                       ; Continue
   107                              <1> PutStr2:
   108 0000009A 881D[F4030000]      <1>     mov   [Char],bl                     ; Stash our character
   109 000000A0 E8A6FFFFFF          <1>     call  PutChar                       ; Print it out
   110 000000A5 A1[F8030000]        <1>     mov   eax,[VidAdr]                  ; Bump
   111 000000AA 83C002              <1>     add   eax,2                         ;  Video Address
   112 000000AD A3[F8030000]        <1>     mov   [VidAdr],eax                  ;  by 2
   113 000000B2 31C0                <1>     xor   eax,eax                       ; Bump
   114 000000B4 A0[F7030000]        <1>     mov   al,[Col]                      ;  Col
   115 000000B9 0401                <1>     add   al,1                          ;  by
   116 000000BB A2[F7030000]        <1>     mov   [Col],al                      ;  1
   117                              <1> PutStr3:
   118 000000C0 46                  <1>     inc   esi                           ; Bump ESI to next character in our string
   119 000000C1 E2B4                <1>     loop  PutStr1                       ; Loop (Decrement CX each time until CX is zero)
   120 000000C3 E802000000          <1>     call  MoveCursor                    ; Update cursor (do this once after displaying the string, more efficient)
   121 000000C8 61                  <1>     popa                                ; Restore registers
   122 000000C9 C3                  <1>     ret                                 ; Return to caller
   123                              <1> 
   124                              <1> ;-----------------------
   125                              <1> ; Update hardware cursor
   126                              <1> ;-----------------------
   127                              <1> MoveCursor:
   128 000000CA 60                  <1>     pusha                               ; Save registers
   129 000000CB 8A3D[F6030000]      <1>     mov   bh,[Row]                      ; BH = row
   130 000000D1 8A1D[F7030000]      <1>     mov   bl,[Col]                      ; BL = col
   131 000000D7 FECF                <1>     dec   bh                            ; BH-- (Make row zero based)
   132                              <1> 
   133 000000D9 31C0                <1>     xor   eax,eax                       ; Clear EAX
   134 000000DB B950000000          <1>     mov   ecx,TotCol                    ; ECX = TotCol
   135 000000E0 88F8                <1>     mov   al,bh                         ; Row
   136 000000E2 F7E1                <1>     mul   ecx                           ;  * TotCol
   137 000000E4 00D8                <1>     add   al,bl                         ;  + Col
   138 000000E6 89C3                <1>     mov   ebx,eax                       ; Save result in EBX (BL,BH in particular)
   139                              <1> 
   140 000000E8 31C0                <1>     xor   eax,eax                       ; Clear EAX
   141 000000EA 66BAD403            <1>     mov   dx,03D4h                      ; Set VGA port to  03D4h (Video controller register select)
   142 000000EE B00F                <1>     mov   al,0Fh                        ; Set VGA port-index 0Fh (cursor location low byte)
   143 000000F0 EE                  <1>     out   dx,al                         ; Write to the VGA port
   144 000000F1 66BAD503            <1>     mov   dx,03D5h                      ; Set VGA port to  03D5h (Video controller data)
   145 000000F5 88D8                <1>     mov   al,bl                         ; Set low byte of calculated cursor position from above
   146 000000F7 EE                  <1>     out   dx,al                         ; Write to the VGA port
   147                              <1> 
   148 000000F8 31C0                <1>     xor   eax,eax                       ; Clear EAX
   149 000000FA 66BAD403            <1>     mov   dx,03D4h                      ; Set VGA port to  03D4h (Video controller register select)
   150 000000FE B00E                <1>     mov   al,0Eh                        ; Set VGA port-index 0Fh (cursor location high byte)
   151 00000100 EE                  <1>     out   dx,al                         ; Write to the VGA port
   152 00000101 66BAD503            <1>     mov   dx,03D5h                      ; Set VGA port to  03D5h (Video controller data)
   153 00000105 88F8                <1>     mov   al,bh                         ; Set high byte of calculated cursor position from above
   154 00000107 EE                  <1>     out   dx,al                         ; Write to the VGA port
   155                              <1> 
   156 00000108 61                  <1>     popa                                ; Restore registers
   157 00000109 C3                  <1>     ret                                 ; Return to caller
   158                              <1> 
   159                              <1> ;-------------
   160                              <1> ; Clear Screen
   161                              <1> ;-------------
   162                              <1> ClrScr:
   163 0000010A 60                  <1>     pusha                               ; Save registers
   164 0000010B FC                  <1>     cld                                 ; Clear DF Flag, REP STOSW increments EDI
   165 0000010C BF00800B00          <1>     mov   edi,VidMem                    ; Set EDI to beginning of Video Memory
   166 00000111 31C9                <1>     xor   ecx,ecx                       ; 2,000 'words'
   167 00000113 66B9D007            <1>     mov   cx,2000                       ;  on the screen
   168 00000117 8A25[F3030000]      <1>     mov   ah,[ColorAttr]                ; Set color attribute
   169 0000011D B020                <1>     mov   al,' '                        ; We're going to 'blank' out the screen
   170 0000011F F366AB              <1>     rep   stosw                         ; Move AX to video memory pointed to by EDI, Repeat CX times, increment EDI each time
   171 00000122 B001                <1>     mov   al,1
   172 00000124 A2[F7030000]        <1>     mov   [Col],al                      ; Set Col to 1
   173 00000129 A2[F6030000]        <1>     mov   [Row],al                      ; Set Row to 1
   174 0000012E 61                  <1>     popa                                ; Restore registers
   175 0000012F C3                  <1>     ret                                 ; Return to caller
   176                              <1> 
   177                              <1> ;-------------------
   178                              <1> ; Set Color Attribute
   179                              <1> ;-------------------
   180                              <1> SetColorAttr:
   181 00000130 60                  <1>     pusha                               ; Save registers
   182 00000131 A0[F1030000]        <1>     mov   al,[ColorBack]                ; Background color (e.g. 3)
   183 00000136 C0E004              <1>     shl   al,4                          ;  goes in highest 4 bits of AL
   184 00000139 8A1D[F2030000]      <1>     mov   bl,[ColorFore]                ; Foreground color in lowest 4 bits of BL (e.g. F)
   185 0000013F 09D8                <1>     or    eax,ebx                       ; AL now has the combination of background and foreground (e.g. 3F)
   186 00000141 A2[F3030000]        <1>     mov   [ColorAttr],al                ; Save result in ColorAttr
   187 00000146 61                  <1>     popa                                ; Restore registers
   188 00000147 C3                  <1>     ret                                 ; Return to caller
   189                              <1> 
   190                              <1> ;-----------------
   191                              <1> ; Scroll Screen Up
   192                              <1> ;-----------------
   193                              <1> ScrollUp:
   194 00000148 60                  <1>     pusha
   195 00000149 BEA0800B00          <1>     mov   esi,VidMem + 160              ; start of row 2
   196 0000014E BF00800B00          <1>     mov   edi,VidMem                    ; start of row 1
   197 00000153 B980070000          <1>     mov   ecx,24*80                     ; 24 rows × 80 columns
   198 00000158 F366A5              <1>     rep   movsw                         ; copy each word (char+attr)
   199                              <1>     ; Clear bottom row
   200 0000015B 66B82000            <1>     mov   ax,' '                        ; space character
   201 0000015F 8A25[F3030000]      <1>     mov   ah,[ColorAttr]                ; current color
   202 00000165 BF008F0B00          <1>     mov   edi,VidMem + 24*160           ; start of row 25
   203 0000016A B950000000          <1>     mov   ecx,80
   204                              <1> ScrollClr:
   205 0000016F 66AB                <1>     stosw
   206 00000171 E2FC                <1>     loop  ScrollClr
   207 00000173 61                  <1>     popa
   208 00000174 C3                  <1>     ret
    16                                  
    17                                  ;--------------------------------------------------------------------------------------------------
    18                                  ; Kernel Entry Point
    19                                  ;--------------------------------------------------------------------------------------------------
    20                                  Stage3:
    21                                    ;--------------
    22                                    ; Set registers
    23                                    ;--------------
    24 00000175 66B81000                 	mov		ax,0x10
    25 00000179 8ED8                      mov   ds,ax                         ;  segments to
    26 0000017B 8ED0                      mov   ss,ax                         ;  data selector
    27 0000017D 8EC0                      mov   es,ax                         ;  (10h)
    28 0000017F BC00000900                mov   esp,90000h                    ; Stack begins from 90000h
    29                                    
    30 00000184 8D05[20080000]           lea    eax, [GDTDescriptor]         ; Load the address of GDTDescriptor into EAX
    31 0000018A 0F0110                   lgdt   [eax]                        ; Load the GDT using the address in EAX
    32                                    
    33                                    ;-------------
    34                                    ; Clear screen
    35                                    ;-------------
    36 0000018D B000                      mov   al,Black                      ; Background
    37 0000018F A2[F1030000]              mov   [ColorBack],al                ;  color
    38 00000194 B005                      mov   al,Purple                     ; Foreground
    39 00000196 A2[F2030000]              mov   [ColorFore],al                ;  color
    40 0000019B E890FFFFFF                call  SetColorAttr                  ; Set color
    41 000001A0 E865FFFFFF                call  ClrScr                        ; Clear screen
    42                                  
    43                                    ;--------------
    44                                    ; Print success
    45                                    ;--------------
    46 000001A5 B00A                      mov   al,10                         ; Set
    47 000001A7 A2[F6030000]              mov   [Row],al                      ;  Row,Col
    48 000001AC B001                      mov   al,1                          ;  to
    49 000001AE A2[F7030000]              mov   [Col],al                      ;  10,1
    50 000001B3 BB[AD020000]              mov   ebx,Msg1                      ; Put
    51 000001B8 E8A6FEFFFF                call  PutStr                        ;  Msg1
    52 000001BD BB[B6030000]              mov   ebx,NewLine                   ; Put
    53 000001C2 E89CFEFFFF                call  PutStr                        ;  a New Line
    54 000001C7 BB[CF020000]              mov   ebx,Msg2                      ; Put
    55 000001CC E892FEFFFF                call  PutStr                        ;  Msg2
    56 000001D1 BB[B6030000]              mov   ebx,NewLine                   ; Put
    57 000001D6 E888FEFFFF                call  PutStr                        ;  a New Line
    58                                  
    59                                    ;------------------------
    60                                    ; Initialize the 8259 PIC
    61                                    ;------------------------
    62 000001DB B011                      mov   al,00010001b                  ; Set ICW1
    63 000001DD E620                      out   PIC1_CTRL,al                  ;  Intialize
    64 000001DF E6A0                      out   PIC2_CTRL,al                  ;  8259
    65 000001E1 B020                      mov   al,020h                       ; Set ICW2
    66 000001E3 E621                      out   PIC1_DATA,al                  ;  Map
    67 000001E5 B028                      mov   al,028h                       ;  IRQs
    68 000001E7 E6A1                      out   PIC2_DATA,al                  ;  32-47
    69 000001E9 B004                      mov   al,00000100b                  ; Set ICW3
    70 000001EB E621                      out   PIC1_DATA,al                  ;  Connect PIC1
    71 000001ED B002                      mov   al,00000010b                  ;  and PIC2
    72 000001EF E6A1                      out   PIC2_DATA,al                  ;  via IRQ line 2
    73 000001F1 B001                      mov   al,00000001b                  ; Set ICW4
    74 000001F3 E621                      out   PIC1_DATA,al                  ;  We are in
    75 000001F5 E6A1                      out   PIC2_DATA,al                  ;  80x86 mode
    76 000001F7 E887000000                call  SetPIT                        ; Configure the PIT for timer interrupts
    77 000001FC BB[5D030000]              mov   ebx,Msg7                      ; Put
    78 00000201 E86E000000                call  DebugIt                       ;  Msg7
    79                                  
    80                                    ;--------------
    81                                    ; Set Timer IDT
    82                                    ;--------------
    83 00000206 BA20000000                mov   edx,020h                      ; Timer IRQ 0 is now IRQ 32 (020h)
    84 0000020B C1E203                    shl   edx,3                         ; Position into
    85 0000020E 81C2[00000000]            add   edx,IDT                       ;  the IDT
    86 00000214 66B8008E                  mov   ax,08E00h                     ; Stash
    87 00000218 66894204                  mov   [EDX+4],ax                    ;  stuff
    88 0000021C B8[92020000]              mov   eax,IsrTimer                  ;  into
    89 00000221 668902                    mov   [edx],ax                      ;  the IDT
    90 00000224 C1E810                    shr   eax,16                        ;  to link IRQ 32
    91 00000227 66894206                  mov   [EDX+6],ax                    ;  to the
    92 0000022B 66B80800                  mov   ax,008h                       ;  correct ISR
    93 0000022F 66894202                  mov   [EDX+2],ax                    ;  which is IsrTimer
    94 00000233 BB[6D030000]              mov   ebx,Msg8                      ; Put
    95 00000238 E837000000                call  DebugIt                       ;  Msg8
    96                                  
    97                                    ;-----------------
    98                                    ; Set Keyboard IDT  
    99                                    ;-----------------
   100 0000023D BA21000000                mov   edx,021h                      ; IRQ1 maps to vector 0x21  
   101 00000242 C1E203                    shl   edx,3                         ; Multiply by 8 (IDT entry size)
   102 00000245 81C2[00000000]            add   edx,IDT                       ; Point to correct IDT slot
   103 0000024B 66B8008E                  mov   ax,08E00h                     ; Present, DPL=0, 32-bit interrupt gate
   104 0000024F 66894204                  mov   [EDX+4],ax                    ; Set access rights
   105 00000253 B8[9F020000]              mov   eax,IsrKeyboard               ; Address of ISR
   106 00000258 8902                      mov   [edx],eax                     ; Low 16 bits of offset  
   107 0000025A C1E810                    shr   eax,16                        ; High 16 bits of offset  
   108 0000025D 894206                    mov   [EDX+6],eax                   ; Set high offset  
   109 00000260 66B80800                  mov   ax,008h                       ; Code segment selector  
   110 00000264 66894202                  mov   [EDX+2],ax                    ; Set segment selector
   111 00000268 BB[7C030000]              mov   ebx,Msg9                      ; Put
   112 0000026D E802000000                call  DebugIt                       ;  Msg9
   113                                  
   114                                  .halt:
   115 00000272 EBFE                      jmp .halt                           ; Infinite loop to prevent return
   116                                  
   117                                  DebugIt:
   118 00000274 E8EAFDFFFF                call PutStr                         ; Print string at EBX
   119 00000279 BB[B6030000]              mov   ebx,NewLine                   ; Put
   120 0000027E E8E0FDFFFF                call  PutStr                        ;  a New Line
   121                                      
   122                                  ;----------------------------------------------
   123                                  ; Configure PIT for 18.2 Hz (default frequency)
   124                                  ;----------------------------------------------
   125                                  SetPIT:
   126 00000283 B036                      mov   al,00110110b                  ; Set PIT to Mode 3 (Square Wave Generator)
   127 00000285 E643                      out   43h,al                        ; Write to PIT control port
   128 00000287 66B8FFFF                  mov   ax,0FFFFh                     ; Divisor for 18.2 Hz (default)
   129 0000028B E640                      out   40h,al                        ; Write low byte of divisor
   130 0000028D 88E0                      mov   al,ah                         ; Write high byte of divisor
   131 0000028F E640                      out   40h,al
   132 00000291 C3                        ret
   133                                  
   134                                  ;----------
   135                                  ; ISR Timer
   136                                  ;----------
   137                                  IsrTimer:
   138 00000292 60                        pushad
   139 00000293 FF05[12040000]            inc   dword [TimerTicks]            ; Increment the tick counter
   140 00000299 B020                      mov   al,020h                       ; Send EOI - End of Interrupt
   141 0000029B E620                      out   PIC1_CTRL,al                  ;  to master PIC
   142 0000029D 61                        popad
   143 0000029E CF                        iretd
   144                                  
   145                                  ;-------------
   146                                  ; ISR Keyboard  
   147                                  ;-------------
   148                                  IsrKeyboard:  
   149 0000029F 60                        pushad  
   150 000002A0 E460                      in al,060h                         ; Read scancode from keyboard  
   151 000002A2 A2[F5030000]              mov [KbChar],al                    ; Store it in KbChar  
   152 000002A7 B020                      mov al,020h                        ; Send EOI to PIC  
   153 000002A9 E620                      out PIC1_CTRL,al  
   154 000002AB 61                        popad  
   155 000002AC CF                        iretd
   156                                  
   157                                  ;--------------------------------------------------------------------------------------------------
   158                                  ; Working Storage
   159                                  ;--------------------------------------------------------------------------------------------------
   160                                  %macro String 2
   161                                  %1          dw  %%EndStr-%1
   162                                              db  %2
   163                                  %%EndStr:
   164                                  %endmacro
   165                                  String  Msg1,"------   AsmOSx86 v0.0.2   -----"
   161 000002AD 2200                <1> %1 dw %%EndStr-%1
   162 000002AF 2D2D2D2D2D2D202020- <1>  db %2
   162 000002B8 41736D4F5378383620- <1>
   162 000002C1 76302E302E32202020- <1>
   162 000002CA 2D2D2D2D2D          <1>
   163                              <1> %%EndStr:
   166                                  String  Msg2,"--------  32 Bit Kernel --------"
   161 000002CF 2200                <1> %1 dw %%EndStr-%1
   162 000002D1 2D2D2D2D2D2D2D2D20- <1>  db %2
   162 000002DA 20333220426974204B- <1>
   162 000002E3 65726E656C202D2D2D- <1>
   162 000002EC 2D2D2D2D2D          <1>
   163                              <1> %%EndStr:
   167                                  String  Msg3,"AsmOSx86 has ended!!"
   161 000002F1 1600                <1> %1 dw %%EndStr-%1
   162 000002F3 41736D4F5378383620- <1>  db %2
   162 000002FC 68617320656E646564- <1>
   162 00000305 2121                <1>
   163                              <1> %%EndStr:
   168                                  String  Msg4,"ISR Timer Started"
   161 00000307 1300                <1> %1 dw %%EndStr-%1
   162 00000309 4953522054696D6572- <1>  db %2
   162 00000312 2053746172746564    <1>
   163                              <1> %%EndStr:
   169                                  String  Msg5,"Start clearing keyboard buffer"
   161 0000031A 2000                <1> %1 dw %%EndStr-%1
   162 0000031C 537461727420636C65- <1>  db %2
   162 00000325 6172696E67206B6579- <1>
   162 0000032E 626F61726420627566- <1>
   162 00000337 666572              <1>
   163                              <1> %%EndStr:
   170                                  String  Msg6,"Finished clearing keyboard buffer"
   161 0000033A 2300                <1> %1 dw %%EndStr-%1
   162 0000033C 46696E697368656420- <1>  db %2
   162 00000345 636C656172696E6720- <1>
   162 0000034E 6B6579626F61726420- <1>
   162 00000357 627566666572        <1>
   163                              <1> %%EndStr:
   171                                  String  Msg7,"PIT Configured"
   161 0000035D 1000                <1> %1 dw %%EndStr-%1
   162 0000035F 50495420436F6E6669- <1>  db %2
   162 00000368 6775726564          <1>
   163                              <1> %%EndStr:
   172                                  String  Msg8,"Timer IDT Set"
   161 0000036D 0F00                <1> %1 dw %%EndStr-%1
   162 0000036F 54696D657220494454- <1>  db %2
   162 00000378 20536574            <1>
   163                              <1> %%EndStr:
   173                                  String  Msg9,"Keyboard IDT Set"
   161 0000037C 1200                <1> %1 dw %%EndStr-%1
   162 0000037E 4B6579626F61726420- <1>  db %2
   162 00000387 49445420536574      <1>
   163                              <1> %%EndStr:
   174                                  String  FaultMsg,"------   FAULT: System Halted   ------"
   161 0000038E 2800                <1> %1 dw %%EndStr-%1
   162 00000390 2D2D2D2D2D2D202020- <1>  db %2
   162 00000399 4641554C543A205379- <1>
   162 000003A2 7374656D2048616C74- <1>
   162 000003AB 65642020202D2D2D2D- <1>
   162 000003B4 2D2D                <1>
   163                              <1> %%EndStr:
   175                                  String  NewLine,0Ah
   161 000003B6 0300                <1> %1 dw %%EndStr-%1
   162 000003B8 0A                  <1>  db %2
   163                              <1> %%EndStr:
   176                                  String  Buffer,"XXXXXXXX"
   161 000003B9 0A00                <1> %1 dw %%EndStr-%1
   162 000003BB 5858585858585858    <1>  db %2
   163                              <1> %%EndStr:
   177                                  
   178                                  String  DivideMsg, "Divide by zero fault"
   161 000003C3 1600                <1> %1 dw %%EndStr-%1
   162 000003C5 446976696465206279- <1>  db %2
   162 000003CE 207A65726F20666175- <1>
   162 000003D7 6C74                <1>
   163                              <1> %%EndStr:
   179                                  String  DoubleMsg, "Double fault triggered"
   161 000003D9 1800                <1> %1 dw %%EndStr-%1
   162 000003DB 446F75626C65206661- <1>  db %2
   162 000003E4 756C74207472696767- <1>
   162 000003ED 65726564            <1>
   163                              <1> %%EndStr:
   180                                  
   181                                  
   182 000003F1 00                      ColorBack   db  0                       ; Background color (00h - 0Fh)
   183 000003F2 00                      ColorFore   db  0                       ; Foreground color (00h - 0Fh)
   184 000003F3 00                      ColorAttr   db  0                       ; Combination of background and foreground color (e.g. 3Fh 3=cyan background,F=white text)
   185 000003F4 00                      Char        db  0                       ; ASCII character
   186 000003F5 00                      KbChar      db  0                       ; Keyboard character
   187 000003F6 00                      Row         db  0                       ; Row (1-25)
   188 000003F7 00                      Col         db  0                       ; Col (1-80)
   189 000003F8 00000000                VidAdr      dd  0                       ; Video Address
   190 000003FC 303132333435363738-     HexDigits   db  "0123456789ABCDEF"
   190 00000405 39414243444546     
   191                                  
   192 0000040C 1011                    Scancode    db  10h, 11h
   193 0000040E 02                      ScancodeSz  db  ScancodeSz-Scancode
   194 0000040F 7177                    CharCode    db  71h, 77h
   195 00000411 02                      CharCodeSz  db  ScancodeSz-Scancode
   196                                  
   197 00000412 00000000                TimerTicks  dd  0                       ; Counter for timer ticks
   198 00000416 00000000                SleepTicks  dd  0                       ; Number of ticks to sleep
   199                                  
   200                                  ;--------------------------------------------------------------------------------------------------
   201                                  ; Video
   202                                  ;--------------------------------------------------------------------------------------------------
   203                                  VidMem      equ 0B8000h                 ; Video Memory (Starting Address)
   204                                  TotCol      equ 80                      ; width and height of screen
   205                                  Black       equ 00h                     ; Black
   206                                  Cyan        equ 03h                     ; Cyan
   207                                  Purple      equ 05h                     ; Purple
   208                                  White       equ 0Fh                     ; White
   209                                  
   210                                  ;--------------------------------------------------------------------------------------------------
   211                                  ; PIC - 8259 Programmable Interrupt Controller
   212                                  ;--------------------------------------------------------------------------------------------------
   213                                  PIC1        equ 020h                    ; PIC - Master
   214                                  PIC2        equ 0A0h                    ; PIC - Slave
   215                                  PIC1_CTRL   equ PIC1                    ; PIC1 Command port
   216                                  PIC1_DATA   equ PIC1+1                  ; PIC1 Data port
   217                                  PIC2_CTRL   equ PIC2                    ; PIC2 Command port
   218                                  PIC2_DATA   equ PIC2+1                  ; PIC2 Data port
   219                                  
   220                                  ;--------------------------------------------------------------------------------------------------
   221                                  ; Interrupt Descriptor Table (IDT)
   222                                  ;--------------------------------------------------------------------------------------------------
   223                                  segment .data
   224                                  align 4
   225                                  IDT:
   226 00000000 00<rep 800h>            IDT1: times 2048 db 0
   227                                  IDT2:
   228 00000800 FF07                        dw 2047
   229 00000802 [00000000]                  dd IDT1
   230                                  
   231                                  ;--------------------------------------------------------------------------------------------------
   232                                  ; Global Descriptor Table (GDT) for Kernel
   233                                  ;--------------------------------------------------------------------------------------------------
   234                                  segment .data
   235 00000806 90<rep 2h>              align 8
   236                                  
   237                                  GDTTable:
   238 00000808 0000000000000000            dq 0x0000000000000000       ; Null descriptor (selector 0x00)
   239 00000810 FFFF0000009ACF00            dq 0x00CF9A000000FFFF       ; Code segment (selector 0x08)
   240 00000818 FFFF00000092CF00            dq 0x00CF92000000FFFF       ; Data segment (selector 0x10)
   241                                  GDTTableEnd:
   242                                  
   243                                  GDTDescriptor:
   244 00000820 1700                        dw GDTTableEnd - GDTTable - 1   ; Limit = size of GDT - 1 (should be 23 bytes)
   245 00000822 08081000                    dd 0x00100808                   ; Base = linear address of GDTTable (1MB + offset)
