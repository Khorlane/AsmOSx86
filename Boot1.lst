     1                                  ;**************************************************************************************************
     2                                  ; Boot1.asm - Stage 1 Boot Loader
     3                                  ;   A Simple Boot Sector that:
     4                                  ;   1. is exactly 512 bytes long
     5                                  ;   2. has the Magic Word at the end (0xAA55)
     6                                  ;   3. has code to load our Stage 2 code
     7                                  ;   4. is placed in the 'boot sector' giving us a bootable floppy
     8                                  ;
     9                                  ; nasm -f bin Boot1.asm -o Boot1.bin -l Boot1.lst
    10                                  ;**************************************************************************************************
    11                                  
    12                                  [bits 16]                               ; we are in 16 bit real mode
    13                                      org   0                             ; we will set regisers later
    14 00000000 E9AF00                      jmp   Booter                        ; jump to start of bootloader
    15                                  
    16                                  ;--------------------------------------------------------------------------------------------------
    17                                  ; BIOS Parameter Block
    18                                  ;   and yes, this block must start at offset 0x003
    19                                  ;   and yes, these are the required fields
    20                                  ;   and yes, they must be in this order
    21                                  ;   you can change the names (obviously)
    22                                  ;--------------------------------------------------------------------------------------------------
    23                                  
    24                                  ; The BIOS Parameter Block 'must' begin 3 bytes from start.
    25                                  ; The JMP instruction (above) is exacly the required 3 bytes long.
    26                                  
    27                                                                          ; Hex Offset from beginning of Boot Sector
    28 00000003 41736D4F53783836        OEM                   db "AsmOSx86"     ; 0x003  8 bytes padded with spaces
    29 0000000B 0002                    BytesPerSector        dw 512            ; 0x00B  2 bytes
    30 0000000D 01                      SectorsPerCluster     db 1              ; 0x00D  1 byte
    31 0000000E 0100                    ReservedSectors       dw 1              ; 0x00E  2 bytes
    32 00000010 02                      NumberOfFATs          db 2              ; 0x010  1 bytes
    33 00000011 E000                    RootEntries           dw 224            ; 0x011  2 bytes
    34 00000013 400B                    TotalSectors          dw 2880           ; 0x013  2 bytes
    35 00000015 F0                      Media                 db 0xf0           ; 0x015  1 byte
    36 00000016 0900                    SectorsPerFAT         dw 9              ; 0x016  2 bytes
    37 00000018 1200                    SectorsPerTrack       dw 18             ; 0x018  2 bytes DOS 3.31 BPB
    38 0000001A 0200                    HeadsPerCylinder      dw 2              ; 0x01A  2 bytes DOS 3.31 BPB
    39 0000001C 00000000                HiddenSectors         dd 0              ; 0x01C  4 bytes DOS 3.31 BPB
    40 00000020 00000000                TotalSectorsBig       dd 0              ; 0x020  4 bytes DOS 3.31 BPB
    41 00000024 00                      DriveNumber           db 0              ; 0x024  1 byte  Extended BIOS Parameter Block
    42 00000025 00                      Unused                db 0              ; 0x025  1 byte  Extended BIOS Parameter Block
    43 00000026 29                      ExtBootSignature      db 0x29           ; 0x026  1 byte  Extended BIOS Parameter Block
    44 00000027 A3A2A1A0                SerialNumber          dd 0xa0a1a2a3     ; 0x027  4 bytes Extended BIOS Parameter Block
    45 0000002B 41736D4F5378383620-     VolumeLabel           db "AsmOSx86   "  ; 0x028 11 bytes Extended BIOS Parameter Block
    45 00000034 2020               
    46 00000036 4641543132202020        FileSystem            db "FAT12   "     ; 0x036  8 bytes Extended BIOS Parameter Block padded with spaces
    47                                  
    48                                  ;--------------------------------------------------------------------------------------------------
    49                                  ; Prints a string
    50                                  ; DS => SI: 0 terminated string
    51                                  ;--------------------------------------------------------------------------------------------------
    52                                  Print:
    53 0000003E B40E                        mov   ah,0Eh                        ; set function code 0E (BIOS INT 10h - Teletype output) 
    54                                  PrintLoop:
    55 00000040 AC                          LODSB                               ; Load byte at address DS:(E)SI into AL
    56 00000041 08C0                        or    al,al                         ; If AL = 0
    57 00000043 7404                        jz    PrintDone                     ;   then we're done
    58 00000045 CD10                        int   10h                           ; Put character on the screen using bios interrupt 10
    59 00000047 EBF7                        jmp   PrintLoop                     ; Repeat until null terminator found
    60                                    PrintDone:
    61 00000049 C3                          ret                                 ; we are done, so return
    62                                  
    63                                  ;--------------------------------------------------------------------------------------------------
    64                                  ; Convert CHS to LBA
    65                                  ; Given: AX = Cluster to be read
    66                                  ; LBA = (Cluster - 2) * sectors per cluster
    67                                  ;--------------------------------------------------------------------------------------------------
    68                                  ClusterLBA:
    69 0000004A 83E802                      sub   ax,0x0002                     ; Adjust cluster to be zero based
    70 0000004D 31C9                        xor   cx,cx                         ; CX =
    71 0000004F 8A0E[0D00]                  mov   cl,byte [SectorsPerCluster]   ;  SectorsPerCluster
    72 00000053 F7E1                        mul   cx                            ; AX = AX * CX
    73 00000055 0306[9601]                  add   ax,word [DataSector]          ; AX = AX + Data Sector
    74 00000059 C3                          ret
    75                                  
    76                                  ;--------------------------------------------------------------------------------------------------
    77                                  ; Convert LBA to CHS
    78                                  ; AX => LBA Address to convert
    79                                  ; absolute sector = (LBA %  sectors per track) + 1
    80                                  ; absolute head   = (LBA /  sectors per track) MOD number of heads
    81                                  ; absolute track  =  LBA / (sectors per track * number of heads)
    82                                  ;--------------------------------------------------------------------------------------------------
    83                                  LBACHS:
    84 0000005A 31D2                        xor   dx,dx                         ; DL = Remainder of
    85 0000005C F736[1800]                  div   word [SectorsPerTrack]        ;  AX \ SectorsPerTrack
    86 00000060 FEC2                        inc   dl                            ;   Plus 1
    87 00000062 8816[9201]                  mov   byte [AbsoluteSector],DL      ;    Save DL 
    88 00000066 31D2                        xor   dx,dx                         ; DL = Remainder of
    89 00000068 F736[1A00]                  div   word [HeadsPerCylinder]       ;  AX \ HeadsPerCylinder
    90 0000006C 8816[9101]                  mov   byte [AbsoluteHead],DL        ;   Save DL
    91 00000070 A2[9301]                    mov   byte [AbsoluteTrack],AL       ; Save AL (what's left after the above dividing)
    92 00000073 C3                          ret
    93                                  
    94                                  ;--------------------------------------------------------------------------------------------------
    95                                  ; Reads a series of sectors
    96                                  ; CX    => Number of sectors to read
    97                                  ; AX    => Starting sector
    98                                  ; ES:BX => Buffer to read to
    99                                  ;--------------------------------------------------------------------------------------------------
   100                                  ReadSector:
   101 00000074 BF0500                      mov   di,0x0005                     ; five retries for error
   102                                  ReadSectorLoop:
   103 00000077 50                          push  ax
   104 00000078 53                          push  bx
   105 00000079 51                          push  cx
   106 0000007A E8DDFF                      call  LBACHS                        ; convert starting sector to CHS
   107 0000007D B402                        mov   ah,0x02                       ; BIOS read sector
   108 0000007F B001                        mov   al,0x01                       ; read one sector
   109 00000081 8A2E[9301]                  mov   ch,byte [AbsoluteTrack]       ; track
   110 00000085 8A0E[9201]                  mov   cl,byte [AbsoluteSector]      ; sector
   111 00000089 8A36[9101]                  mov   dh,byte [AbsoluteHead]        ; head
   112 0000008D 8A16[2400]                  mov   dl,byte [DriveNumber]         ; drive
   113 00000091 CD13                        int   0x13                          ; invoke BIOS
   114 00000093 730C                        jnc   ReadSectorOk                  ; test for read error
   115 00000095 31C0                        xor   ax,ax                         ; BIOS reset disk
   116 00000097 CD13                        int   0x13                          ; invoke BIOS
   117 00000099 4F                          dec   di                            ; decrement error counter
   118 0000009A 59                          pop   cx
   119 0000009B 5B                          pop   bx
   120 0000009C 58                          pop   ax
   121 0000009D 75D8                        jnz   ReadSectorLoop                ; attempt to read again
   122 0000009F CD18                        int   0x18
   123                                  ReadSectorOk:
   124 000000A1 BE[CB01]                    mov   si,ProgressMsg
   125 000000A4 E897FF                      call  Print                         ;
   126 000000A7 59                          pop   cx
   127 000000A8 5B                          pop   bx
   128 000000A9 58                          pop   ax
   129 000000AA 031E[0B00]                  add   bx,word [BytesPerSector]      ; queue next buffer
   130 000000AE 40                          inc   ax                            ; queue next sector
   131 000000AF E2C3                        loop  ReadSector                    ; read next sector
   132 000000B1 C3                          ret
   133                                  
   134                                  ;--------------------------------------------------------------------------------------------------
   135                                  ; Boot Loader Entry Point
   136                                  ;--------------------------------------------------------------------------------------------------
   137                                  Booter:
   138                                      ;-------------------------------------------------------
   139                                      ;- code located at 0000:7C00, adjust segment registers
   140                                      ;-------------------------------------------------------
   141 000000B2 FA                          cli                                 ; disable interrupts
   142 000000B3 B8C007                      mov   ax,0x07C0                     ; setup
   143 000000B6 8ED8                        mov   ds,ax                         ;  registers
   144 000000B8 8EC0                        mov   es,ax                         ;   to point
   145 000000BA 8EE0                        mov   fs,ax                         ;    to our
   146 000000BC 8EE8                        mov   gs,ax                         ;     segment
   147                                  
   148                                      ;--------------
   149                                      ;- create stack
   150                                      ;--------------
   151 000000BE B80000                      mov   ax,0x0000                     ; set the
   152 000000C1 8ED0                        mov   ss,ax                         ;  stack to
   153 000000C3 BCFFFF                      mov   sp,0xFFFF                     ;   somewhere safe
   154 000000C6 FB                          sti                                 ; restore interrupts
   155                                  
   156                                      ;-------------------------
   157                                      ;- Display loading message
   158                                      ;-------------------------
   159 000000C7 BE[AE01]                    mov   si,LoadingMsg                 ; si points to first byte in message
   160 000000CA E871FF                      call  Print                         ; print message
   161                                  
   162                                      ;--------------------------
   163                                      ; Load root directory table  
   164                                      ;--------------------------
   165                                      ; compute size of root directory and store in "cx"
   166 000000CD 31C9                        xor   cx,cx                         ; zero out cx
   167 000000CF 31D2                        xor   dx,dx                         ; zero out dx
   168 000000D1 B82000                      mov   ax,0x0020                     ; 32 byte directory entry
   169 000000D4 F726[1100]                  mul   word [RootEntries]            ; total size of directory
   170 000000D8 F736[0B00]                  div   word [BytesPerSector]         ; sectors used by directory
   171 000000DC 91                          xchg  ax,cx                         ; swap ax cx
   172                                      ; compute location of root directory and store in "ax"
   173 000000DD A0[1000]                    mov   al,byte [NumberOfFATs]        ; number of FATs
   174 000000E0 F726[1600]                  mul   word [SectorsPerFAT]          ; sectors used by FATs
   175 000000E4 0306[0E00]                  add   ax,word [ReservedSectors]     ; adjust for bootsector
   176 000000E8 A3[9601]                    mov   word [DataSector],AX          ; base of root directory
   177 000000EB 010E[9601]                  add   word [DataSector],CX
   178                                      ; read root directory into memory (7C00:0200)
   179 000000EF BB0002                      mov   bx,0x0200                     ; read root dir
   180 000000F2 E87FFF                      call  ReadSector                    ;  above bootcode
   181                                  
   182                                      ;------------------------------------
   183                                      ; Find Stage 2 file in Root Directory
   184                                      ;------------------------------------
   185 000000F5 8B0E[1100]                  mov   cx,word [RootEntries]         ; load loop counter
   186 000000F9 BF0002                      mov   di,0x0200                     ; locate first root entry
   187                                  FindFat:
   188 000000FC 51                          push  cx                            ; save loop counter on the stack
   189 000000FD B90B00                      mov   cx,0x000B                     ; eleven character name
   190 00000100 BE[EC01]                    mov   si,Stage2Name                 ; Stage2 file name to find
   191 00000103 57                          push  di
   192 00000104 F3A6                        rep   cmpsb                         ; test for entry match
   193 00000106 5F                          pop   di
   194 00000107 7408                        je    LoadFat                       ; found our file, now load it
   195 00000109 59                          pop   cx                            ; pop our loop counter
   196 0000010A 83C720                      add   di,0x0020                     ; queue next directory entry
   197 0000010D E2ED                        loop  FindFat                       ; keep looking
   198 0000010F EB74                        jmp   FindFatFailed                 ; file not found, this is bad!
   199                                  
   200                                      ;--------------------------
   201                                      ; Load FAT
   202                                      ;--------------------------
   203                                  LoadFat:
   204                                      ; save starting cluster of boot image
   205 00000111 8B551A                      mov   dx,word [DI + 0x001A]         ; save file's
   206 00000114 8916[9401]                  mov   word [Cluster],DX             ;  first cluster
   207                                  
   208                                      ; compute size of FAT and store in "cx"
   209 00000118 31C0                        xor   ax,ax
   210 0000011A A0[1000]                    mov   al,byte [NumberOfFATs]        ; number of FATs
   211 0000011D F726[1600]                  mul   word [SectorsPerFAT]          ; sectors used by FATs
   212 00000121 89C1                        mov   cx,ax
   213                                  
   214                                      ; compute location of FAT and store in "ax"
   215 00000123 A1[0E00]                    mov   ax,word [ReservedSectors]     ; adjust for bootsector
   216                                  
   217                                      ; read FAT into memory (7C00:0200)
   218 00000126 BB0002                      mov   bx,0x0200                     ; read FAT
   219 00000129 E848FF                      call  ReadSector                    ;  into memory above our bootcode
   220                                  
   221                                  ;--------------------------------------------------------------------------------------------------
   222                                  ; Load Stage 2
   223                                  ;--------------------------------------------------------------------------------------------------
   224                                      ; read Stage2 file into memory (0050:0000)
   225 0000012C B85000                      mov   ax,0x0050                     ; set segment register
   226 0000012F 8EC0                        mov   es,ax                         ;  to 50h
   227 00000131 BB0000                      mov   bx,0x0000                     ; push our starting address (0h)
   228 00000134 53                          push  bx                            ;  onto the stack
   229                                  
   230                                  LoadStage2:
   231 00000135 A1[9401]                    mov   ax,word [Cluster]             ; cluster to read
   232 00000138 5B                          pop   bx                            ; buffer to read into
   233 00000139 E80EFF                      call  ClusterLBA                    ; convert cluster to LBA
   234 0000013C 31C9                        xor   cx,cx                         ; CL =
   235 0000013E 8A0E[0D00]                  mov   cl,byte [SectorsPerCluster]   ;  sectors to read
   236 00000142 E82FFF                      call  ReadSector                    ; read a sector
   237 00000145 53                          push  bx                            ; push buffer ptr to stack
   238                                  
   239                                      ; compute next cluster
   240 00000146 A1[9401]                    mov   ax,word [Cluster]             ; identify current cluster
   241 00000149 89C1                        mov   cx,ax                         ; copy current cluster
   242 0000014B 89C2                        mov   dx,ax                         ; copy current cluster
   243 0000014D D1EA                        shr   dx,0x0001                     ; divide by two
   244 0000014F 01D1                        add   cx,dx                         ; sum for (3/2)
   245 00000151 BB0002                      mov   bx,0x0200                     ; location of FAT in memory
   246 00000154 01CB                        add   bx,cx                         ; index into FAT
   247 00000156 8B17                        mov   dx,word [BX]                  ; read two bytes from FAT, indexed by BX
   248 00000158 A90100                      test  ax,0x0001                     ; test under mask, if cluster number is odd
   249 0000015B 7506                        jnz   LoadStage2OddCluster          ;  then process Odd Cluster
   250                                  
   251                                  LoadStage2EvenCluster:
   252 0000015D 81E2FF0F                    and   dx,0000111111111111b          ; take low  twelve bits DX x'ABCD' -> x'0BCD'
   253 00000161 EB03                        jmp   LoadStage2CheckDone
   254                                  
   255                                  LoadStage2OddCluster:
   256 00000163 C1EA04                      shr   dx,0x0004                     ; take high twelve bits DX x'ABCD' -> x'0ABC'
   257                                  
   258                                  LoadStage2CheckDone:
   259 00000166 8916[9401]                  mov   word [Cluster],DX             ; store new cluster
   260 0000016A 81FAF00F                    cmp   dx,0x0FF0                     ; If DX is less than EOF (0x0FF0)
   261 0000016E 72C5                        jb    LoadStage2                    ;   then keep going (JB = Jump Below)
   262                                  
   263                                  ;--------------------------------------------------------------------------------------------------
   264                                  ; Jump to Stage 2 code
   265                                  ;--------------------------------------------------------------------------------------------------
   266 00000170 BE[CD01]                    mov   si,Stage2Msg                  ; si points to first byte in message
   267 00000173 E8C8FE                      call  Print                         ; print message
   268 00000176 B400                        mov   ah,0X00                       ; wait
   269 00000178 CD16                        INT   0x16                          ;  for keypress
   270 0000017A BE[C801]                    mov   si,NewLineMsg                 ; print
   271 0000017D E8BEFE                      CALL  Print                         ;  new line
   272 00000180 6A50                        push  word 0x0050                   ; Jump to our Stage 2 code that we put at 0050:0000
   273 00000182 6A00                        push  word 0x0000                   ;   by using a Far Return which pops IP(0h) then CS(50h)
   274 00000184 CB                          retf                                ;   and poof, we're executing our Stage 2 code!
   275                                  
   276                                  ;--------------------------------------------------------------------------------------------------
   277                                  ; Failed to find FAT (File Allocation Table)
   278                                  ;--------------------------------------------------------------------------------------------------
   279                                  FindFatFailed:
   280 00000185 BE[9801]                    mov   si,FailureMsg                 ; print
   281 00000188 E8B3FE                      call  Print                         ;  failure message
   282 0000018B B400                        mov   ah,0x00                       ; wait for
   283 0000018D CD16                        int   0x16													;  keypress
   284 0000018F CD19                        int   0x19                          ; warm boot computer
   285                                  
   286                                  ;--------------------------------------------------------------------------------------------------
   287                                  ; Working Storage
   288                                  ;--------------------------------------------------------------------------------------------------
   289 00000191 00                          AbsoluteHead			db 0x00
   290 00000192 00                          AbsoluteSector		db 0x00
   291 00000193 00                          AbsoluteTrack			db 0x00
   292 00000194 0000                        Cluster						dw 0x0000
   293 00000196 0000                        DataSector				dw 0x0000
   294 00000198 0D0A4D495353494E47-         FailureMsg				db 0x0D, 0x0A, "MISSING BOOT2.BIN", 0x0D, 0x0A, 0x00
   294 000001A1 20424F4F54322E4249-
   294 000001AA 4E0D0A00           
   295 000001AE 0D0A41736D4F537838-         LoadingMsg				db 0x0D, 0x0A, "AsmOSx86 v0.0.1 Stage 1", 0x00
   295 000001B7 362076302E302E3120-
   295 000001C0 5374616765203100   
   296 000001C8 0D0A00                      NewLineMsg				db 0x0D, 0x0A, 0x00
   297 000001CB 2E00                        ProgressMsg				db ".", 0x00
   298 000001CD 0D0A2048697420456E-         Stage2Msg					db 0x0D, 0x0A, " Hit Enter, Jump to Stage 2 ", 0x00
   298 000001D6 7465722C204A756D70-
   298 000001DF 20746F205374616765-
   298 000001E8 20322000           
   299 000001EC 424F4F543220202042-         Stage2Name				db "BOOT2   BIN"
   299 000001F5 494E               
   300                                  
   301                                  ;--------------------------------------------------------------------------------------------------
   302                                  ; Make it a Boot Sector! (must be exactly 512 bytes)
   303                                  ;--------------------------------------------------------------------------------------------------
   304 000001F7 00<rep 7h>                  TIMES 510-($-$$)	db 0              ; make boot sector exactly 512 bytes
   305 000001FE 55AA                    											dw 0xAA55         ; Magic Word that makes this a boot sector
